{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Service name\n\n",
        "title": "Monitoring API reference"
    },
    "paths": {
        "/configs/monitoring/v1/MirrorSession": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List MirrorSession objects",
                "operationId": "ListMirrorSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSessionList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create MirrorSession object",
                "operationId": "AddMirrorSession_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/MirrorSession/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get MirrorSession object",
                "operationId": "GetMirrorSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "PacketSize: Max size of a mirrored packet, packet size is not checked by default. Value should be between 64 and 2048.",
                        "name": "spec.packet-size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "start-condition.schedule-time",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "spec.packet-filters",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "interfaces.direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Value should be between 1 and 1023.",
                        "name": "spec.span-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "rx is towards the workload and tx is from workload.",
                        "name": "workloads.direction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source.target-type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "rx is towards the Source and tx is from Source.",
                        "name": "source.direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "Enable/disable mirroring.",
                        "name": "spec.disabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.schedule-state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "status.started-at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Generation ID this status is for.",
                        "name": "propagation-status.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of Naples that this version has already been pushed to.",
                        "name": "propagation-status.updated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                        "name": "propagation-status.pending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Version running on the slowest DSC.",
                        "name": "propagation-status.min-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Textual description of propagation status.",
                        "name": "propagation-status.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of DSCs where propagation did not complete.",
                        "name": "propagation-status.pending-dscs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update MirrorSession object",
                "operationId": "UpdateMirrorSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete MirrorSession object",
                "operationId": "DeleteMirrorSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/MirrorSession/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label MirrorSession object",
                "operationId": "LabelMirrorSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/TroubleshootingSession": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List TroubleshootingSession objects",
                "operationId": "ListTroubleshootingSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSessionList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create TroubleshootingSession object",
                "operationId": "AddTroubleshootingSession_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/TroubleshootingSession/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get TroubleshootingSession object",
                "operationId": "GetTroubleshootingSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP address list, example [\"10.1.1.10\",\"10.1.1.15\"].",
                        "name": "source.ip-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of MacAddresses - \"aabb.ccdd.eeff\", \"0001.0203.0405\". Should be a valid MAC address.",
                        "name": "source.mac-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP address list, example [\"10.1.1.10\",\"10.1.1.15\"].",
                        "name": "destination.ip-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of MacAddresses - \"aabb.ccdd.eeff\", \"0001.0203.0405\". Should be a valid MAC address.",
                        "name": "destination.mac-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "ports - Includes protocol name and port Eg [\"tcp/1234\", \"udp\"]. Should be a valid layer 3 or layer 4 protocol and port range. any is also allowed.",
                        "name": "app-protocol-selectors.proto-ports",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Apps - E.g. [\"Redis\"].",
                        "name": "app-protocol-selectors.applications",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start/Stop Time - when start time is not specified, it implies start NOW.",
                        "name": "time-window.start-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Stop time - when not specified, default will be used.",
                        "name": "time-window.stop-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.repeat-every",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If packet capture is enabled, a mirror-session will be internally created.",
                        "name": "spec.enable-mirroring",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update TroubleshootingSession object",
                "operationId": "UpdateTroubleshootingSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete TroubleshootingSession object",
                "operationId": "DeleteTroubleshootingSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/TroubleshootingSession/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label TroubleshootingSession object",
                "operationId": "LabelTroubleshootingSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alertDestinations": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List AlertDestination objects",
                "operationId": "ListAlertDestination_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestinationList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create AlertDestination object",
                "operationId": "AddAlertDestination_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alertDestinations/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get AlertDestination object",
                "operationId": "GetAlertDestination_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TODO:  format, config, SMTP config.",
                        "name": "email-export.email-list",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "event export format, SYSLOG_BSD default.",
                        "name": "syslog-export.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "total number of notifications sent using this notification mechanism.",
                        "name": "status.total-notifications-sent",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update AlertDestination object",
                "operationId": "UpdateAlertDestination_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete AlertDestination object",
                "operationId": "DeleteAlertDestination_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alertDestinations/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label AlertDestination object",
                "operationId": "LabelAlertDestination_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List AlertPolicy objects",
                "operationId": "ListAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create AlertPolicy object",
                "operationId": "AddAlertPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alertPolicies/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get AlertPolicy object",
                "operationId": "GetAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource type - target resource to run this policy. e.g. Network, Endpoint - object based alert policy Event - event based alert policy EndpointMetrics - metric based alert policy based on the resource type, the policy gets interpreted.",
                        "name": "spec.resource",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Severity to be set for an alert that gets triggered from this rule.",
                        "name": "spec.severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Message to be used while generating the alert XXX: Event based alerts should not carry a message. It will be derived from the event.",
                        "name": "spec.message",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.",
                        "name": "spec.enable",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "name of the alert destinations to be used to send out notification when an alert gets generated.",
                        "name": "spec.destinations",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total hits on this policy.",
                        "name": "status.total-hits",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Open alerts based on this policy.",
                        "name": "status.open-alerts",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Acknowledged alerts based on this policy.",
                        "name": "status.acknowledged-alerts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update AlertPolicy object",
                "operationId": "UpdateAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete AlertPolicy object",
                "operationId": "DeleteAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alertPolicies/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label AlertPolicy object",
                "operationId": "LabelAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alerts": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List Alert objects",
                "operationId": "ListAlert_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alerts/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get Alert object",
                "operationId": "GetAlert_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Severity of an alert.",
                        "name": "status.severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source.component",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source.node-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event that triggered the alert.",
                        "name": "status.event-uri",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant of the object.",
                        "name": "object-ref.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects.",
                        "name": "object-ref.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "object-ref.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects.",
                        "name": "object-ref.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URI is a link to accessing the referenced object.",
                        "name": "object-ref.uri",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Message from the alert rule that triggered the alert.",
                        "name": "status.message",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Alert Policy ID that matched.",
                        "name": "reason.alert-policy-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the user performed some action.",
                        "name": "acknowledged.user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the action was performed.",
                        "name": "acknowledged.time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the user performed some action.",
                        "name": "resolved.user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the action was performed.",
                        "name": "resolved.time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "TotalHits on this alert, If there is an exisiting alert for the condition, we do not re-create the alert instead we update this counter.",
                        "name": "status.total-hits",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update Alert object",
                "operationId": "UpdateAlert_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/alerts/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label Alert object",
                "operationId": "LabelAlert_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/archive-requests": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List ArchiveRequest objects",
                "operationId": "ListArchiveRequest_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequestList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create ArchiveRequest object",
                "operationId": "AddArchiveRequest_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/archive-requests/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get ArchiveRequest object",
                "operationId": "GetArchiveRequest_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.",
                        "name": "query.start-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.",
                        "name": "query.end-time",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "OR of tenants within the scope of which archive needs to be performed. If not specified, it will be set to tenant of the logged in user. Also users in non default tenant can archive logs in their tenant scope only.",
                        "name": "query.tenants",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.uri",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete ArchiveRequest object",
                "operationId": "DeleteArchiveRequest_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/archive-requests/{O.Name}/Cancel": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "operationId": "Cancel_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringCancelArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/audit-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get AuditPolicy object",
                "operationId": "GetAuditPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "flag to enable sending audit events to syslog.",
                        "name": "syslog-auditor.enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "audit event export format, SYSLOG_BSD default.",
                        "name": "syslog-auditor.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update AuditPolicy object",
                "operationId": "UpdateAuditPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create AuditPolicy object",
                "operationId": "AddAuditPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete AuditPolicy object",
                "operationId": "DeleteAuditPolicy_1",
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/event-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List EventPolicy objects",
                "operationId": "ListEventPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create EventPolicy object",
                "operationId": "AddEventPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/event-policy/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get EventPolicy object",
                "operationId": "GetEventPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "event export format, SYSLOG_BSD default.",
                        "name": "spec.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update EventPolicy object",
                "operationId": "UpdateEventPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete EventPolicy object",
                "operationId": "DeleteEventPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/event-policy/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label EventPolicy object",
                "operationId": "LabelEventPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/flowExportPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List FlowExportPolicy objects",
                "operationId": "ListFlowExportPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create FlowExportPolicy object",
                "operationId": "AddFlowExportPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/flowExportPolicy/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get FlowExportPolicy object",
                "operationId": "GetFlowExportPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VrfName specifies the name of the VRF that the current flow export Policy belongs to.",
                        "name": "spec.vrf-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Interval defines how often to push the records to an external collector The value is specified as a string format, '10s', '20m'. Should be a valid time duration between 1s and 24h0m0s.",
                        "name": "spec.interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "TemplateInterval defines how often to send ipfix templates to an external collector The value is specified as a string format, '1m', '10m'. Should be a valid time duration between 1m0s and 30m0s.",
                        "name": "spec.template-interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Generation ID this status is for.",
                        "name": "propagation-status.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of Naples that this version has already been pushed to.",
                        "name": "propagation-status.updated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                        "name": "propagation-status.pending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Version running on the slowest DSC.",
                        "name": "propagation-status.min-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Textual description of propagation status.",
                        "name": "propagation-status.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of DSCs where propagation did not complete.",
                        "name": "propagation-status.pending-dscs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update FlowExportPolicy object",
                "operationId": "UpdateFlowExportPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete FlowExportPolicy object",
                "operationId": "DeleteFlowExportPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/flowExportPolicy/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label FlowExportPolicy object",
                "operationId": "LabelFlowExportPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/fwlogPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List FwlogPolicy objects",
                "operationId": "ListFwlogPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create FwlogPolicy object",
                "operationId": "AddFwlogPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/fwlogPolicy/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get FwlogPolicy object",
                "operationId": "GetFwlogPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VrfName specifies the name of the VRF that the current Firewall Log Policy belongs to.",
                        "name": "spec.vrf-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "fwlog format, SYSLOG_BSD default.",
                        "name": "spec.format",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "filter firewall logs, FWLOG_ALL default.",
                        "name": "spec.filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "Enable is for enabling the log export. Its default value is false.",
                        "name": "psm-target.enable",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update FwlogPolicy object",
                "operationId": "UpdateFwlogPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete FwlogPolicy object",
                "operationId": "DeleteFwlogPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/fwlogPolicy/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label FwlogPolicy object",
                "operationId": "LabelFwlogPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/statsAlertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List StatsAlertPolicy objects",
                "operationId": "ListStatsAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create StatsAlertPolicy object",
                "operationId": "AddStatsAlertPolicy_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/statsAlertPolicies/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get StatsAlertPolicy object",
                "operationId": "GetStatsAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Metric group - e.g. ftestats, flowstats, etc.",
                        "name": "metric.group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sub-category within the group e.g. MaxSessionThresholdDrops, FlowMissPackets.",
                        "name": "metric.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field belonging to the kind e.g. ConnectionsPerSecond. This is the attribute that will be monitored and alerts will be created/resolved based on the thresholds.",
                        "name": "metric.field-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The length of time the metric will be monitored/observed before running the values against thresholds for alert creation/resolution. ui-hint: Allowed values - 5m, 10m, 30m, 1h.",
                        "name": "measurement-criteria.window",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Aggregate function to be applied on the metric values that were monitored over a window/interval.",
                        "name": "measurement-criteria.function",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Operator to be applied when comparing metric values against the threshold values.",
                        "name": "thresholds.operator",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.",
                        "name": "spec.enable",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "name of the alert destinations to be used to send out notification when an alert gets generated.",
                        "name": "spec.destinations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind of the instances to be selected using names/label.",
                        "name": "instance-selector.kind",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of names/reporter IDs.",
                        "name": "instance-selector.names",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total hits on this policy.",
                        "name": "status.total-hits",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Open alerts based on this policy.",
                        "name": "status.open-alerts",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Acknowledged alerts based on this policy.",
                        "name": "status.acknowledged-alerts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update StatsAlertPolicy object",
                "operationId": "UpdateStatsAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete StatsAlertPolicy object",
                "operationId": "DeleteStatsAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/statsAlertPolicies/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label StatsAlertPolicy object",
                "operationId": "LabelStatsAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/techsupport": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List TechSupportRequest objects",
                "operationId": "ListTechSupportRequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTechSupportRequestList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create TechSupportRequest object",
                "operationId": "AddTechSupportRequest",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringTechSupportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTechSupportRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/techsupport/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get TechSupportRequest object",
                "operationId": "GetTechSupportRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "node-selector.names",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Verbosity defines the verbosity level.",
                        "name": "spec.verbosity",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "SkipCores if set to true skips the core files when collecting techsupport.",
                        "name": "spec.skip-cores",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.instance-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.reason",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTechSupportRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete TechSupportRequest object",
                "operationId": "DeleteTechSupportRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTechSupportRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List MirrorSession objects",
                "operationId": "ListMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSessionList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create MirrorSession object",
                "operationId": "AddMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get MirrorSession object",
                "operationId": "GetMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "PacketSize: Max size of a mirrored packet, packet size is not checked by default. Value should be between 64 and 2048.",
                        "name": "spec.packet-size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "start-condition.schedule-time",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "spec.packet-filters",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "interfaces.direction",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Value should be between 1 and 1023.",
                        "name": "spec.span-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "rx is towards the workload and tx is from workload.",
                        "name": "workloads.direction",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source.target-type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "rx is towards the Source and tx is from Source.",
                        "name": "source.direction",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "Enable/disable mirroring.",
                        "name": "spec.disabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.schedule-state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "status.started-at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Generation ID this status is for.",
                        "name": "propagation-status.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of Naples that this version has already been pushed to.",
                        "name": "propagation-status.updated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                        "name": "propagation-status.pending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Version running on the slowest DSC.",
                        "name": "propagation-status.min-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Textual description of propagation status.",
                        "name": "propagation-status.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of DSCs where propagation did not complete.",
                        "name": "propagation-status.pending-dscs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update MirrorSession object",
                "operationId": "UpdateMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete MirrorSession object",
                "operationId": "DeleteMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/MirrorSession/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label MirrorSession object",
                "operationId": "LabelMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringMirrorSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List TroubleshootingSession objects",
                "operationId": "ListTroubleshootingSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSessionList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create TroubleshootingSession object",
                "operationId": "AddTroubleshootingSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get TroubleshootingSession object",
                "operationId": "GetTroubleshootingSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP address list, example [\"10.1.1.10\",\"10.1.1.15\"].",
                        "name": "source.ip-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of MacAddresses - \"aabb.ccdd.eeff\", \"0001.0203.0405\". Should be a valid MAC address.",
                        "name": "source.mac-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP address list, example [\"10.1.1.10\",\"10.1.1.15\"].",
                        "name": "destination.ip-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of MacAddresses - \"aabb.ccdd.eeff\", \"0001.0203.0405\". Should be a valid MAC address.",
                        "name": "destination.mac-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "ports - Includes protocol name and port Eg [\"tcp/1234\", \"udp\"]. Should be a valid layer 3 or layer 4 protocol and port range. any is also allowed.",
                        "name": "app-protocol-selectors.proto-ports",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Apps - E.g. [\"Redis\"].",
                        "name": "app-protocol-selectors.applications",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start/Stop Time - when start time is not specified, it implies start NOW.",
                        "name": "time-window.start-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Stop time - when not specified, default will be used.",
                        "name": "time-window.stop-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.repeat-every",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If packet capture is enabled, a mirror-session will be internally created.",
                        "name": "spec.enable-mirroring",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update TroubleshootingSession object",
                "operationId": "UpdateTroubleshootingSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete TroubleshootingSession object",
                "operationId": "DeleteTroubleshootingSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/TroubleshootingSession/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label TroubleshootingSession object",
                "operationId": "LabelTroubleshootingSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringTroubleshootingSession"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List AlertDestination objects",
                "operationId": "ListAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestinationList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create AlertDestination object",
                "operationId": "AddAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get AlertDestination object",
                "operationId": "GetAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TODO:  format, config, SMTP config.",
                        "name": "email-export.email-list",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "event export format, SYSLOG_BSD default.",
                        "name": "syslog-export.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "total number of notifications sent using this notification mechanism.",
                        "name": "status.total-notifications-sent",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update AlertDestination object",
                "operationId": "UpdateAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete AlertDestination object",
                "operationId": "DeleteAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alertDestinations/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label AlertDestination object",
                "operationId": "LabelAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertDestination"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List AlertPolicy objects",
                "operationId": "ListAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create AlertPolicy object",
                "operationId": "AddAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get AlertPolicy object",
                "operationId": "GetAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource type - target resource to run this policy. e.g. Network, Endpoint - object based alert policy Event - event based alert policy EndpointMetrics - metric based alert policy based on the resource type, the policy gets interpreted.",
                        "name": "spec.resource",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Severity to be set for an alert that gets triggered from this rule.",
                        "name": "spec.severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Message to be used while generating the alert XXX: Event based alerts should not carry a message. It will be derived from the event.",
                        "name": "spec.message",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.",
                        "name": "spec.enable",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "name of the alert destinations to be used to send out notification when an alert gets generated.",
                        "name": "spec.destinations",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total hits on this policy.",
                        "name": "status.total-hits",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Open alerts based on this policy.",
                        "name": "status.open-alerts",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Acknowledged alerts based on this policy.",
                        "name": "status.acknowledged-alerts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update AlertPolicy object",
                "operationId": "UpdateAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete AlertPolicy object",
                "operationId": "DeleteAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alertPolicies/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label AlertPolicy object",
                "operationId": "LabelAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alerts": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List Alert objects",
                "operationId": "ListAlert",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlertList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alerts/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get Alert object",
                "operationId": "GetAlert",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Severity of an alert.",
                        "name": "status.severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source.component",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "source.node-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event that triggered the alert.",
                        "name": "status.event-uri",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant of the object.",
                        "name": "object-ref.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects.",
                        "name": "object-ref.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "object-ref.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects.",
                        "name": "object-ref.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URI is a link to accessing the referenced object.",
                        "name": "object-ref.uri",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Message from the alert rule that triggered the alert.",
                        "name": "status.message",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Alert Policy ID that matched.",
                        "name": "reason.alert-policy-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the user performed some action.",
                        "name": "acknowledged.user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the action was performed.",
                        "name": "acknowledged.time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the user performed some action.",
                        "name": "resolved.user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time at which the action was performed.",
                        "name": "resolved.time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "TotalHits on this alert, If there is an exisiting alert for the condition, we do not re-create the alert instead we update this counter.",
                        "name": "status.total-hits",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update Alert object",
                "operationId": "UpdateAlert",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/alerts/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label Alert object",
                "operationId": "LabelAlert",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAlert"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List ArchiveRequest objects",
                "operationId": "ListArchiveRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequestList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create ArchiveRequest object",
                "operationId": "AddArchiveRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get ArchiveRequest object",
                "operationId": "GetArchiveRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.",
                        "name": "query.start-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.",
                        "name": "query.end-time",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "OR of tenants within the scope of which archive needs to be performed. If not specified, it will be set to tenant of the logged in user. Also users in non default tenant can archive logs in their tenant scope only.",
                        "name": "query.tenants",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.reason",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status.uri",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete ArchiveRequest object",
                "operationId": "DeleteArchiveRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/archive-requests/{O.Name}/Cancel": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "operationId": "Cancel",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringCancelArchiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringArchiveRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/audit-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get AuditPolicy object",
                "operationId": "GetAuditPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "flag to enable sending audit events to syslog.",
                        "name": "syslog-auditor.enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "audit event export format, SYSLOG_BSD default.",
                        "name": "syslog-auditor.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update AuditPolicy object",
                "operationId": "UpdateAuditPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create AuditPolicy object",
                "operationId": "AddAuditPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete AuditPolicy object",
                "operationId": "DeleteAuditPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAuditPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List EventPolicy objects",
                "operationId": "ListEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create EventPolicy object",
                "operationId": "AddEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get EventPolicy object",
                "operationId": "GetEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "event export format, SYSLOG_BSD default.",
                        "name": "spec.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update EventPolicy object",
                "operationId": "UpdateEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete EventPolicy object",
                "operationId": "DeleteEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/event-policy/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label EventPolicy object",
                "operationId": "LabelEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringEventPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List FlowExportPolicy objects",
                "operationId": "ListFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create FlowExportPolicy object",
                "operationId": "AddFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get FlowExportPolicy object",
                "operationId": "GetFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VrfName specifies the name of the VRF that the current flow export Policy belongs to.",
                        "name": "spec.vrf-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Interval defines how often to push the records to an external collector The value is specified as a string format, '10s', '20m'. Should be a valid time duration between 1s and 24h0m0s.",
                        "name": "spec.interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "TemplateInterval defines how often to send ipfix templates to an external collector The value is specified as a string format, '1m', '10m'. Should be a valid time duration between 1m0s and 30m0s.",
                        "name": "spec.template-interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.format",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Generation ID this status is for.",
                        "name": "propagation-status.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of Naples that this version has already been pushed to.",
                        "name": "propagation-status.updated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                        "name": "propagation-status.pending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Version running on the slowest DSC.",
                        "name": "propagation-status.min-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Textual description of propagation status.",
                        "name": "propagation-status.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of DSCs where propagation did not complete.",
                        "name": "propagation-status.pending-dscs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update FlowExportPolicy object",
                "operationId": "UpdateFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete FlowExportPolicy object",
                "operationId": "DeleteFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/flowExportPolicy/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label FlowExportPolicy object",
                "operationId": "LabelFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFlowExportPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List FwlogPolicy objects",
                "operationId": "ListFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create FwlogPolicy object",
                "operationId": "AddFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get FwlogPolicy object",
                "operationId": "GetFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VrfName specifies the name of the VRF that the current Firewall Log Policy belongs to.",
                        "name": "spec.vrf-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "fwlog format, SYSLOG_BSD default.",
                        "name": "spec.format",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "filter firewall logs, FWLOG_ALL default.",
                        "name": "spec.filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "override default facility with this in exported logs.",
                        "name": "config.facility-override",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "add prefix in exported logs.",
                        "name": "config.prefix",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "Enable is for enabling the log export. Its default value is false.",
                        "name": "psm-target.enable",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update FwlogPolicy object",
                "operationId": "UpdateFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete FwlogPolicy object",
                "operationId": "DeleteFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/fwlogPolicy/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label FwlogPolicy object",
                "operationId": "LabelFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringFwlogPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "List StatsAlertPolicy objects",
                "operationId": "ListStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicyList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Create StatsAlertPolicy object",
                "operationId": "AddStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies/{O.Name}": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Get StatsAlertPolicy object",
                "operationId": "GetStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Metric group - e.g. ftestats, flowstats, etc.",
                        "name": "metric.group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sub-category within the group e.g. MaxSessionThresholdDrops, FlowMissPackets.",
                        "name": "metric.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field belonging to the kind e.g. ConnectionsPerSecond. This is the attribute that will be monitored and alerts will be created/resolved based on the thresholds.",
                        "name": "metric.field-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The length of time the metric will be monitored/observed before running the values against thresholds for alert creation/resolution. ui-hint: Allowed values - 5m, 10m, 30m, 1h.",
                        "name": "measurement-criteria.window",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Aggregate function to be applied on the metric values that were monitored over a window/interval.",
                        "name": "measurement-criteria.function",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Operator to be applied when comparing metric values against the threshold values.",
                        "name": "thresholds.operator",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.",
                        "name": "spec.enable",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "name of the alert destinations to be used to send out notification when an alert gets generated.",
                        "name": "spec.destinations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Kind of the instances to be selected using names/label.",
                        "name": "instance-selector.kind",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of names/reporter IDs.",
                        "name": "instance-selector.names",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Total hits on this policy.",
                        "name": "status.total-hits",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Open alerts based on this policy.",
                        "name": "status.open-alerts",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Acknowledged alerts based on this policy.",
                        "name": "status.acknowledged-alerts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Update StatsAlertPolicy object",
                "operationId": "UpdateStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Delete StatsAlertPolicy object",
                "operationId": "DeleteStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/tenant/{O.Tenant}/statsAlertPolicies/{O.Name}/label": {
            "post": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Label StatsAlertPolicy object",
                "operationId": "LabelStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/monitoringStatsAlertPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/MirrorSession": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch MirrorSession objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchMirrorSession_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgMirrorSessionWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/alertDestinations": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch AlertDestination objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAlertDestination_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAlertDestinationWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/alertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch AlertPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAlertPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/alerts": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch Alert objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAlert_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAlertWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/archive-requests": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch ArchiveRequest objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchArchiveRequest_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgArchiveRequestWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/audit-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch AuditPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAuditPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAuditPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/event-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch EventPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchEventPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgEventPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/flowExportPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch FlowExportPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchFlowExportPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgFlowExportPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/fwlogPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch FwlogPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchFwlogPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgFwlogPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/statsAlertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch StatsAlertPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchStatsAlertPolicy_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgStatsAlertPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/techsupport": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch TechSupportRequest objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchTechSupportRequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgTechSupportRequestWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/MirrorSession": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch MirrorSession objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchMirrorSession",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgMirrorSessionWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/alertDestinations": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch AlertDestination objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAlertDestination",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAlertDestinationWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/alertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch AlertPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAlertPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/alerts": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch Alert objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAlert",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAlertWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/archive-requests": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch ArchiveRequest objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchArchiveRequest",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgArchiveRequestWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/audit-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch AuditPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAuditPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgAuditPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/event-policy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch EventPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchEventPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgEventPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/flowExportPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch FlowExportPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchFlowExportPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgFlowExportPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/fwlogPolicy": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch FwlogPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchFwlogPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgFwlogPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/monitoring/v1/watch/tenant/{O.Tenant}/statsAlertPolicies": {
            "get": {
                "tags": [
                    "monitoring/v1"
                ],
                "summary": "Watch StatsAlertPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchStatsAlertPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/monitoringAutoMsgStatsAlertPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "TechSupportRequestSpecNodeSelectorSpec": {
            "type": "object",
            "properties": {
                "labels": {
                    "$ref": "#/definitions/labelsSelector"
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "apiAggWatchOptions": {
            "type": "object",
            "properties": {
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "watch-options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiKindWatchOptions"
                    }
                }
            }
        },
        "apiKindWatchOptions": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/apiListWatchOptions"
                }
            }
        },
        "apiLabel": {
            "description": "Label is the input for label operations.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "creation-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "generation-id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mod-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "type": "string"
                },
                "self-link": {
                    "type": "string"
                },
                "tenant": {
                    "description": "Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "apiListMeta": {
            "description": "ListMeta contains the metadata for list of objects.",
            "type": "object",
            "properties": {
                "resource-version": {
                    "description": "Resource version of object store at the time of list generation.",
                    "type": "string"
                },
                "total-count": {
                    "description": "TotalCount is the total count of results (non paginated) that the server holds.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "apiListWatchOptions": {
            "type": "object",
            "required": [
                "sort-order"
            ],
            "properties": {
                "creation-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "field-change-selector": {
                    "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field-selector": {
                    "description": "FieldSelector to select on field values in list or watch results.",
                    "type": "string"
                },
                "from": {
                    "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                    "type": "integer",
                    "format": "int32"
                },
                "generation-id": {
                    "type": "string"
                },
                "label-selector": {
                    "description": "LabelSelector to select on labels in list or watch results.",
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "max-results": {
                    "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                    "type": "integer",
                    "format": "int32"
                },
                "meta-only": {
                    "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                    "type": "boolean",
                    "format": "boolean",
                    "default": "false"
                },
                "mod-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "type": "string"
                },
                "self-link": {
                    "type": "string"
                },
                "sort-order": {
                    "description": "order to sort List results in.",
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "by-name",
                        "by-name-reverse",
                        "by-version",
                        "by-version-reverse",
                        "by-creation-time",
                        "by-creation-time-reverse",
                        "by-mod-time",
                        "by-mod-time-reverse"
                    ],
                    "x-ui-hints": {
                        "by-creation-time": "By Creation Time",
                        "by-creation-time-reverse": "By Creation Time Reverse",
                        "by-mod-time": "By Modification Time",
                        "by-mod-time-reverse": "By Modification Time Reverse",
                        "by-name": "By Name",
                        "by-name-reverse": "By Name Reverse",
                        "by-version": "By Version",
                        "by-version-reverse": "By Version Reverse",
                        "none": "None"
                    }
                },
                "tenant": {
                    "description": "Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "apiObjectMeta": {
            "description": "ObjectMeta contains metadata that all objects stored in kvstore must have.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "creation-time": {
                    "description": "System generated and updated, not updatable by user.",
                    "type": "string",
                    "format": "date-time",
                    "title": "CreationTime is the creation time of the object"
                },
                "generation-id": {
                    "description": "This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "GenerationID is the generation Id for the object"
                },
                "labels": {
                    "type": "object",
                    "title": "Labels are arbitrary (key,value) pairs associated with any object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mod-time": {
                    "description": "System generated and updated, not updatable by user.",
                    "type": "string",
                    "format": "date-time",
                    "title": "ModTime is the Last Modification time of the object"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "title": "Name of the object, unique within a Namespace for scoped objects",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "description": "This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "Resource version in the object store"
                },
                "self-link": {
                    "description": "When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "SelfLink is a link for accessing this object"
                },
                "tenant": {
                    "description": "This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "title": "Tenant to which the object belongs to",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "description": "This is generated on creation of the object. System generated, not updatable by user.",
                    "type": "string",
                    "title": "UUID is the unique identifier for the object"
                }
            }
        },
        "apiObjectRef": {
            "description": "ObjectRef contains identifying information about an object.",
            "type": "object",
            "properties": {
                "kind": {
                    "description": "Kind represents the type of the API object.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the object, unique within a Namespace for scoped objects.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the object, for scoped objects.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant of the object.",
                    "type": "string"
                },
                "uri": {
                    "description": "URI is a link to accessing the referenced object.",
                    "type": "string"
                }
            }
        },
        "apiStatus": {
            "description": "Status is returned for calls that dont return objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "code": {
                    "description": "Code is the HTTP status code.",
                    "type": "integer",
                    "format": "int32"
                },
                "kind": {
                    "type": "string"
                },
                "message": {
                    "description": "Message contains human readable form of the error.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "object-ref": {
                    "description": "Reference to the object (optional) for which this status is being sent.",
                    "$ref": "#/definitions/apiObjectRef"
                },
                "result": {
                    "description": "Result contains the status of the operation, success or failure.",
                    "$ref": "#/definitions/apiStatusResult"
                }
            }
        },
        "apiStatusResult": {
            "description": "StatusResult contains possible statuses for a NIC.",
            "type": "object",
            "properties": {
                "Str": {
                    "type": "string"
                }
            }
        },
        "apiTimestamp": {
            "type": "object",
            "properties": {
                "nanos": {
                    "type": "integer",
                    "format": "int32"
                },
                "seconds": {
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "apiTypeMeta": {
            "description": "TypeMeta contains the metadata about kind and version for all API objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind represents the type of the API object.",
                    "type": "string"
                }
            }
        },
        "apiWatchControl": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "apiWatchEvent": {
            "type": "object",
            "properties": {
                "control": {
                    "$ref": "#/definitions/apiWatchControl"
                },
                "object": {
                    "$ref": "#/definitions/googleprotobufAny"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apiWatchEventList": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiWatchEvent"
                    }
                }
            }
        },
        "fieldsRequirement": {
            "description": "Requirement defines a single matching condition for a selector.",
            "type": "object",
            "required": [
                "operator"
            ],
            "properties": {
                "key": {
                    "description": "The label key that the condition applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Condition checked for the key.",
                    "type": "string",
                    "default": "equals",
                    "enum": [
                        "equals",
                        "notequals",
                        "in",
                        "notin",
                        "gt",
                        "gte",
                        "lt",
                        "lte",
                        "infield"
                    ],
                    "x-ui-hints": {
                        "gt": "greater than",
                        "gte": "greater than or equals",
                        "lt": "less than",
                        "lte": "less than or equals",
                        "notequals": "not equals",
                        "notin": "not in"
                    }
                },
                "values": {
                    "description": "Values contains one or more values corresponding to the label key. \"equals\" and \"notEquals\" operators need a single Value. \"in\" and \"notIn\" operators can have one or more values.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "fieldsSelector": {
            "description": "Selector is used to select objects by fields. Requirements in the selector are ANDed. A selector with no Requirements does not select anything.",
            "type": "object",
            "properties": {
                "requirements": {
                    "description": "Requirements are ANDed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/fieldsRequirement"
                    }
                }
            }
        },
        "googleprotobufAny": {
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { \"@type\": \"type.googleapis.com/google.profile.Person\", \"firstName\": <string>, \"lastName\": <string> } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]): { \"@type\": \"type.googleapis.com/google.protobuf.Duration\", \"value\": \"1.212s\" }.",
            "type": "object",
            "properties": {
                "type_url": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.",
                    "type": "string"
                },
                "value": {
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "labelsRequirement": {
            "description": "Requirement defines a single matching condition for a selector.",
            "type": "object",
            "required": [
                "operator"
            ],
            "properties": {
                "key": {
                    "description": "The label key that the condition applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Condition checked for the key.",
                    "type": "string",
                    "default": "equals",
                    "enum": [
                        "equals",
                        "notequals",
                        "in",
                        "notin"
                    ],
                    "x-ui-hints": {
                        "notequals": "not equals",
                        "notin": "not in"
                    }
                },
                "values": {
                    "description": "Values contains one or more values corresponding to the label key. \"equals\" and \"notEquals\" operators need a single Value. \"in\" and \"notIn\" operators can have one or more values.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "labelsSelector": {
            "description": "Selector is used to select objects by labels. Requirements in the selector are ANDed. A selector with no Requirements does not select anything.",
            "type": "object",
            "properties": {
                "requirements": {
                    "description": "Requirements are ANDed.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/labelsRequirement"
                    }
                }
            }
        },
        "monitoringAlert": {
            "description": "Alert defines an alert object.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringAlertSpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringAlertStatus"
                }
            }
        },
        "monitoringAlertDestination": {
            "description": "AlertDestination - tenant scoped.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringAlertDestinationSpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringAlertDestinationStatus"
                }
            }
        },
        "monitoringAlertDestinationList": {
            "description": "AlertDestinationList is a container object for list of AlertDestination objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of AlertDestination objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAlertDestination"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringAlertDestinationSpec": {
            "type": "object",
            "properties": {
                "email-export": {
                    "description": "Email notification.",
                    "$ref": "#/definitions/monitoringEmailExport"
                },
                "selector": {
                    "description": "export alerts matched by the selector.",
                    "$ref": "#/definitions/fieldsSelector"
                },
                "snmp-export": {
                    "description": "SNMP trap destination(s).",
                    "$ref": "#/definitions/monitoringSNMPExport"
                },
                "syslog-export": {
                    "$ref": "#/definitions/monitoringSyslogExport"
                }
            }
        },
        "monitoringAlertDestinationStatus": {
            "type": "object",
            "properties": {
                "total-notifications-sent": {
                    "description": "total number of notifications sent using this notification mechanism.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "monitoringAlertList": {
            "description": "AlertList is a container object for list of Alert objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of Alert objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAlert"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringAlertPolicy": {
            "description": "AlertPolicy - tenant scoped.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringAlertPolicySpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringAlertPolicyStatus"
                }
            }
        },
        "monitoringAlertPolicyList": {
            "description": "AlertPolicyList is a container object for list of AlertPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of AlertPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAlertPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringAlertPolicySpec": {
            "type": "object",
            "required": [
                "severity"
            ],
            "properties": {
                "destinations": {
                    "description": "name of the alert destinations to be used to send out notification when an alert gets generated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enable": {
                    "description": "User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.",
                    "type": "boolean",
                    "format": "boolean",
                    "default": "true"
                },
                "message": {
                    "description": "Message to be used while generating the alert XXX: Event based alerts should not carry a message. It will be derived from the event.",
                    "type": "string"
                },
                "requirements": {
                    "description": "List of requirements that needs to be met to trigger an alert.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/fieldsRequirement"
                    }
                },
                "resource": {
                    "description": "Resource type - target resource to run this policy. e.g. Network, Endpoint - object based alert policy Event - event based alert policy EndpointMetrics - metric based alert policy based on the resource type, the policy gets interpreted.",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity to be set for an alert that gets triggered from this rule.",
                    "type": "string",
                    "default": "info",
                    "enum": [
                        "info",
                        "warn",
                        "critical"
                    ]
                }
            }
        },
        "monitoringAlertPolicyStatus": {
            "type": "object",
            "properties": {
                "acknowledged-alerts": {
                    "description": "Acknowledged alerts based on this policy.",
                    "type": "integer",
                    "format": "int32"
                },
                "open-alerts": {
                    "description": "Open alerts based on this policy.",
                    "type": "integer",
                    "format": "int32"
                },
                "total-hits": {
                    "description": "Total hits on this policy.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "monitoringAlertReason": {
            "description": "AlertReason captures all the requirements with matched value from the alert policy rule at the time of creating an alert. e.g. \"matched-requirements\": [{\"field\": \"cpu\", \"operator\": \"Gt\", \"values\": [90], \"observed-value\": 95}].",
            "type": "object",
            "properties": {
                "alert-policy-id": {
                    "description": "Alert Policy ID that matched.",
                    "type": "string"
                },
                "matched-requirements": {
                    "description": "List of requirements from the alert policy with it's matched value.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringMatchedRequirement"
                    }
                }
            }
        },
        "monitoringAlertSource": {
            "description": "Source of an alert; for alerts generated from events, it maps to event.Source.",
            "type": "object",
            "properties": {
                "component": {
                    "type": "string"
                },
                "node-name": {
                    "type": "string"
                }
            }
        },
        "monitoringAlertSpec": {
            "description": "User can change the state of the alert by changing the spec.",
            "type": "object",
            "required": [
                "state"
            ],
            "properties": {
                "state": {
                    "type": "string",
                    "default": "open",
                    "enum": [
                        "open",
                        "resolved",
                        "acknowledged"
                    ],
                    "x-ui-hints": {
                        "acknowledged": "Acknowledged",
                        "open": "Open",
                        "resolved": "Resolved"
                    }
                }
            }
        },
        "monitoringAlertStatus": {
            "description": "Status part of the alert object.",
            "type": "object",
            "required": [
                "severity"
            ],
            "properties": {
                "acknowledged": {
                    "description": "Username and time at which the alert was acknowledged.",
                    "$ref": "#/definitions/monitoringAuditInfo"
                },
                "event-uri": {
                    "description": "Event that triggered the alert.",
                    "type": "string"
                },
                "message": {
                    "description": "Message from the alert rule that triggered the alert.",
                    "type": "string"
                },
                "object-ref": {
                    "description": "Affected object.",
                    "$ref": "#/definitions/apiObjectRef"
                },
                "reason": {
                    "description": "Captures all the requirements from the alert policy rule with matched value. All these requirements must be cleared to auto-resolve an alert.",
                    "$ref": "#/definitions/monitoringAlertReason"
                },
                "resolved": {
                    "description": "Username and time at which the alert was resolved.",
                    "$ref": "#/definitions/monitoringAuditInfo"
                },
                "severity": {
                    "description": "Severity of an alert.",
                    "type": "string",
                    "default": "info",
                    "enum": [
                        "info",
                        "warn",
                        "critical"
                    ]
                },
                "source": {
                    "description": "Alert source or origin.",
                    "$ref": "#/definitions/monitoringAlertSource"
                },
                "total-hits": {
                    "description": "TotalHits on this alert, If there is an exisiting alert for the condition, we do not re-create the alert instead we update this counter.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "monitoringAppProtoSelector": {
            "description": "Application/protocol selector.",
            "type": "object",
            "properties": {
                "applications": {
                    "description": "Apps - E.g. [\"Redis\"].",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "proto-ports": {
                    "description": "ports - Includes protocol name and port Eg [\"tcp/1234\", \"udp\"]. Should be a valid layer 3 or layer 4 protocol and port range. any is also allowed.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "udp/1234"
                }
            }
        },
        "monitoringArchiveQuery": {
            "description": "ArchiveQuery is to archive audit logs and events based on time window, field values.",
            "type": "object",
            "properties": {
                "end-time": {
                    "description": "EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.",
                    "type": "string",
                    "format": "date-time"
                },
                "fields": {
                    "description": "Field Selector is AND of field.Requirements.",
                    "$ref": "#/definitions/fieldsSelector"
                },
                "labels": {
                    "description": "Label Selector is AND of label.Requirememts.",
                    "$ref": "#/definitions/labelsSelector"
                },
                "start-time": {
                    "description": "StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.",
                    "type": "string",
                    "format": "date-time"
                },
                "tenants": {
                    "description": "OR of tenants within the scope of which archive needs to be performed. If not specified, it will be set to tenant of the logged in user. Also users in non default tenant can archive logs in their tenant scope only.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "texts": {
                    "description": "OR of Text-requirements to be matched, Exclude is not supported for Text search.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/searchTextRequirement"
                    }
                }
            }
        },
        "monitoringArchiveRequest": {
            "description": "ArchiveRequest is to asynchronously archive audit logs and events.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringArchiveRequestSpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringArchiveRequestStatus"
                }
            }
        },
        "monitoringArchiveRequestList": {
            "description": "ArchiveRequestList is a container object for list of ArchiveRequest objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of ArchiveRequest objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringArchiveRequest"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringArchiveRequestSpec": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "query": {
                    "$ref": "#/definitions/monitoringArchiveQuery"
                },
                "type": {
                    "type": "string",
                    "default": "event",
                    "enum": [
                        "event",
                        "auditevent",
                        "firewalllogs"
                    ],
                    "x-ui-hints": {
                        "auditevent": "AuditEvent",
                        "event": "Event",
                        "firewalllogs": "Firewall Logs"
                    }
                }
            }
        },
        "monitoringArchiveRequestStatus": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "default": "scheduled",
                    "enum": [
                        "scheduled",
                        "running",
                        "completed",
                        "failed",
                        "timeout",
                        "canceled"
                    ]
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "monitoringAuditInfo": {
            "description": "AuditInfo captures the user performed the action and the time at which the action was performed.",
            "type": "object",
            "properties": {
                "time": {
                    "description": "Time at which the action was performed.",
                    "type": "string",
                    "format": "date-time"
                },
                "user": {
                    "description": "Name of the user performed some action.",
                    "type": "string"
                }
            }
        },
        "monitoringAuditPolicy": {
            "description": "AuditPolicy represents the policy definition for Audit Events.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of an audit event policy.",
                    "$ref": "#/definitions/monitoringAuditPolicySpec"
                },
                "status": {
                    "description": "Status contains the current state of an audit event policy.",
                    "$ref": "#/definitions/monitoringAuditPolicyStatus"
                }
            }
        },
        "monitoringAuditPolicyList": {
            "description": "AuditPolicyList is a container object for list of AuditPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of AuditPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAuditPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringAuditPolicySpec": {
            "description": "AuditPolicySpec is the specification of an AuditEvent Policy.",
            "type": "object",
            "properties": {
                "syslog-auditor": {
                    "$ref": "#/definitions/monitoringSyslogAuditor"
                }
            }
        },
        "monitoringAuditPolicyStatus": {
            "description": "AuditPolicyStatus.",
            "type": "object"
        },
        "monitoringAuthConfig": {
            "description": "AuthConfig contains the configuration for SNMP Trap authentication.",
            "type": "object",
            "required": [
                "algo"
            ],
            "properties": {
                "algo": {
                    "type": "string",
                    "default": "md5",
                    "enum": [
                        "md5",
                        "sha1"
                    ]
                },
                "password": {
                    "description": "Password contains the authentication password.",
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgAlertDestinationWatchHelper": {
            "description": "AutoMsgAlertDestinationWatchHelper is a wrapper object for watch events for AlertDestination objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgAlertDestinationWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgAlertDestinationWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringAlertDestination"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgAlertPolicyWatchHelper": {
            "description": "AutoMsgAlertPolicyWatchHelper is a wrapper object for watch events for AlertPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgAlertPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgAlertPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringAlertPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgAlertWatchHelper": {
            "description": "AutoMsgAlertWatchHelper is a wrapper object for watch events for Alert objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgAlertWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgAlertWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringAlert"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgArchiveRequestWatchHelper": {
            "description": "AutoMsgArchiveRequestWatchHelper is a wrapper object for watch events for ArchiveRequest objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgArchiveRequestWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgArchiveRequestWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringArchiveRequest"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgAuditPolicyWatchHelper": {
            "description": "AutoMsgAuditPolicyWatchHelper is a wrapper object for watch events for AuditPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgAuditPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgAuditPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringAuditPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgEventPolicyWatchHelper": {
            "description": "AutoMsgEventPolicyWatchHelper is a wrapper object for watch events for EventPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgEventPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgEventPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringEventPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgFlowExportPolicyWatchHelper": {
            "description": "AutoMsgFlowExportPolicyWatchHelper is a wrapper object for watch events for FlowExportPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgFlowExportPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgFlowExportPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringFlowExportPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgFwlogPolicyWatchHelper": {
            "description": "AutoMsgFwlogPolicyWatchHelper is a wrapper object for watch events for FwlogPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgFwlogPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgFwlogPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringFwlogPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgMirrorSessionWatchHelper": {
            "description": "AutoMsgMirrorSessionWatchHelper is a wrapper object for watch events for MirrorSession objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgMirrorSessionWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgMirrorSessionWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringMirrorSession"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgStatsAlertPolicyWatchHelper": {
            "description": "AutoMsgStatsAlertPolicyWatchHelper is a wrapper object for watch events for StatsAlertPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgStatsAlertPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgStatsAlertPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringStatsAlertPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgTechSupportRequestWatchHelper": {
            "description": "AutoMsgTechSupportRequestWatchHelper is a wrapper object for watch events for TechSupportRequest objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgTechSupportRequestWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgTechSupportRequestWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringTechSupportRequest"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringAutoMsgTroubleshootingSessionWatchHelper": {
            "description": "AutoMsgTroubleshootingSessionWatchHelper is a wrapper object for watch events for TroubleshootingSession objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringAutoMsgTroubleshootingSessionWatchHelperWatchEvent"
                    }
                }
            }
        },
        "monitoringAutoMsgTroubleshootingSessionWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/monitoringTroubleshootingSession"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "monitoringCancelArchiveRequest": {
            "description": "CancelArchiveRequest is to cancel archive request that is in scheduled or running state.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                }
            }
        },
        "monitoringDSCStatus": {
            "type": "object",
            "properties": {
                "dsc-id": {
                    "description": "DSC ID for which the agent error or warning is issued.",
                    "type": "string"
                },
                "dsc-info-status": {
                    "description": "InfoStatus contains agent message the operation is failed or warning is issued.",
                    "type": "string"
                }
            }
        },
        "monitoringEmailExport": {
            "type": "object",
            "properties": {
                "email-list": {
                    "description": "TODO:  format, config, SMTP config.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "monitoringEventPolicy": {
            "description": "Event Policy represents the policy definition for Events. Event Client module will be consumer of this policy.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of an event policy.",
                    "$ref": "#/definitions/monitoringEventPolicySpec"
                },
                "status": {
                    "description": "Status contains the current state of an event policy.",
                    "$ref": "#/definitions/monitoringEventPolicyStatus"
                }
            }
        },
        "monitoringEventPolicyList": {
            "description": "EventPolicyList is a container object for list of EventPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of EventPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringEventPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringEventPolicySpec": {
            "description": "EventPolicySpec is the specification of an Event Policy.",
            "type": "object",
            "required": [
                "format"
            ],
            "properties": {
                "config": {
                    "description": "once we support other formats, it should be one of the supported configs syslog specific configuration.",
                    "$ref": "#/definitions/monitoringSyslogExportConfig"
                },
                "format": {
                    "description": "event export format, SYSLOG_BSD default.",
                    "type": "string",
                    "default": "syslog-bsd",
                    "enum": [
                        "syslog-bsd",
                        "syslog-rfc5424"
                    ],
                    "x-ui-hints": {
                        "syslog-bsd": "BSD",
                        "syslog-rfc5424": "RFC5424"
                    }
                },
                "selector": {
                    "description": "export events matched by the selector.",
                    "$ref": "#/definitions/fieldsSelector"
                },
                "targets": {
                    "description": "export target ip/port/protocol.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringExportConfig"
                    }
                }
            }
        },
        "monitoringEventPolicyStatus": {
            "description": "EventPolicyStatus.",
            "type": "object"
        },
        "monitoringExportConfig": {
            "description": "Export Config specifies server address and user credentials.",
            "type": "object",
            "required": [
                "destination"
            ],
            "properties": {
                "destination": {
                    "description": "IP address of the collector/entity to which the data is to be exported. Should be a valid IPv4 address.",
                    "type": "string",
                    "example": "10.1.1.1 "
                },
                "gateway": {
                    "description": "Gateway of the dest IP address to which the data is to be exported. Should be a valid IPv4 address.",
                    "type": "string",
                    "example": "10.1.1.1 "
                },
                "transport": {
                    "description": "protocol and Port number where an external collector is gathering the data example \"UDP/2055\". Should be a valid layer 3 or layer 4 protocol and port/type (only support UDP currently).",
                    "type": "string",
                    "example": "udp/1234"
                }
            }
        },
        "monitoringFlowExportPolicy": {
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringFlowExportPolicySpec"
                },
                "status": {
                    "description": "Status contains the current state of the export policy.",
                    "$ref": "#/definitions/monitoringFlowExportPolicyStatus"
                }
            }
        },
        "monitoringFlowExportPolicyList": {
            "description": "FlowExportPolicyList is a container object for list of FlowExportPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of FlowExportPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringFlowExportPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringFlowExportPolicySpec": {
            "type": "object",
            "required": [
                "interval",
                "template-interval",
                "format"
            ],
            "properties": {
                "exports": {
                    "description": "Export contains export parameters.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringExportConfig"
                    }
                },
                "format": {
                    "type": "string",
                    "default": "ipfix",
                    "enum": [
                        "ipfix"
                    ]
                },
                "interval": {
                    "description": "Interval defines how often to push the records to an external collector The value is specified as a string format, '10s', '20m'. Should be a valid time duration between 1s and 24h0m0s.",
                    "type": "string",
                    "default": "10s",
                    "example": "60s"
                },
                "match-rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringMatchRule"
                    }
                },
                "template-interval": {
                    "description": "TemplateInterval defines how often to send ipfix templates to an external collector The value is specified as a string format, '1m', '10m'. Should be a valid time duration between 1m0s and 30m0s.",
                    "type": "string",
                    "default": "5m",
                    "example": "60s"
                },
                "vrf-name": {
                    "description": "VrfName specifies the name of the VRF that the current flow export Policy belongs to.",
                    "type": "string"
                }
            }
        },
        "monitoringFlowExportPolicyStatus": {
            "description": "FlowExportPolicyStatus.",
            "type": "object",
            "properties": {
                "propagation-status": {
                    "$ref": "#/definitions/monitoringPropagationStatus"
                }
            }
        },
        "monitoringFwlogPolicy": {
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringFwlogPolicySpec"
                },
                "status": {
                    "description": "Status contains the current state of the policy.",
                    "$ref": "#/definitions/monitoringFwlogPolicyStatus"
                }
            }
        },
        "monitoringFwlogPolicyList": {
            "description": "FwlogPolicyList is a container object for list of FwlogPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of FwlogPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringFwlogPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringFwlogPolicySpec": {
            "description": "Venice collects fwlog irrespective of the export config.",
            "type": "object",
            "required": [
                "format",
                "filter"
            ],
            "properties": {
                "config": {
                    "description": "configuration to use for syslog format default facility is set to \"local4\", can be overridden with FacilityOverride fwlog severity is set to \"Informational\".",
                    "$ref": "#/definitions/monitoringSyslogExportConfig"
                },
                "filter": {
                    "description": "filter firewall logs, FWLOG_ALL default.",
                    "type": "array",
                    "default": "all",
                    "enum": [
                        "none",
                        "allow",
                        "deny",
                        "reject",
                        "implicit-reject",
                        "all"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "x-ui-hints": {
                        "all": "All Logs",
                        "allow": "Allow Logs",
                        "deny": "Deny Logs",
                        "implicit-reject": "Implicit Deny Logs",
                        "none": "No Logs",
                        "reject": "Reject Logs"
                    }
                },
                "format": {
                    "description": "fwlog format, SYSLOG_BSD default.",
                    "type": "string",
                    "default": "syslog-bsd",
                    "enum": [
                        "syslog-bsd",
                        "syslog-rfc5424"
                    ],
                    "x-ui-hints": {
                        "syslog-bsd": "BSD",
                        "syslog-rfc5424": "RFC5424"
                    }
                },
                "psm-target": {
                    "description": "PSMExportTarget represents PSM used as a log export target It does not honor Format, Filter fields.",
                    "$ref": "#/definitions/monitoringPSMExportTarget"
                },
                "targets": {
                    "description": "Target contains ip/port/protocol.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringExportConfig"
                    }
                },
                "vrf-name": {
                    "description": "VrfName specifies the name of the VRF that the current Firewall Log Policy belongs to.",
                    "type": "string"
                }
            }
        },
        "monitoringFwlogPolicyStatus": {
            "description": "FirewallLog Policy Status.",
            "type": "object"
        },
        "monitoringInstanceSelector": {
            "description": "Helps to select/filter instances of a kind. If instance selector is not given, then the policy will be applied across all DSCs or Nodes based on the metric identifier. If kind was given, then either names or label or both have to be specified. If the user specified both names and label, policies will be applied on the union of both. Allowed list of kinds: Node, DistributedServiceCard.",
            "type": "object",
            "properties": {
                "kind": {
                    "description": "Kind of the instances to be selected using names/label.",
                    "type": "string"
                },
                "labels": {
                    "description": "LabelSelector to select labels to target specific reporters.",
                    "$ref": "#/definitions/labelsSelector"
                },
                "names": {
                    "description": "List of names/reporter IDs.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "monitoringInterfaceMirror": {
            "type": "object",
            "required": [
                "direction"
            ],
            "properties": {
                "direction": {
                    "type": "string",
                    "default": "both",
                    "enum": [
                        "both",
                        "tx",
                        "rx"
                    ],
                    "x-ui-hints": {
                        "both": "Both",
                        "rx": "Rx",
                        "tx": "Tx"
                    }
                },
                "selectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/labelsSelector"
                    }
                }
            }
        },
        "monitoringMatchRule": {
            "description": "MatchRule : This is used to select packets that need to be monitored (mirrored).",
            "type": "object",
            "properties": {
                "app-protocol-selectors": {
                    "description": "App = * when not specified.",
                    "$ref": "#/definitions/monitoringAppProtoSelector"
                },
                "destination": {
                    "description": "Dst = * when not specified When Dst is specified and resides on Pensando DSC, matching pkts to/from dst will be mirrored.",
                    "$ref": "#/definitions/monitoringMatchSelector"
                },
                "source": {
                    "description": "Either Src or Dst or both must be specified, both cannot be * Src = * when not specified When Src is specified and resides on Pensando DSC, matching pkts to/from src will be mirrored.",
                    "$ref": "#/definitions/monitoringMatchSelector"
                }
            }
        },
        "monitoringMatchSelector": {
            "description": "Traffic Selection Rules Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses.",
            "type": "object",
            "properties": {
                "ip-addresses": {
                    "description": "IP address list, example [\"10.1.1.10\",\"10.1.1.15\"].",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mac-addresses": {
                    "description": "List of MacAddresses - \"aabb.ccdd.eeff\", \"0001.0203.0405\". Should be a valid MAC address.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": "aabb.ccdd.0000, aabb.ccdd.0000, aabb.ccdd.0000"
                }
            }
        },
        "monitoringMatchedRequirement": {
            "description": "One of the requirement from the expression that was met.",
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "observed-value": {
                    "description": "The value at which the requirement was met. same as Requirement.value for operator `Equals` but could vary for other operators e.g. requirement - CPU;Gt;90 could have a matching value 96.",
                    "type": "string"
                },
                "operator": {
                    "type": "string",
                    "default": "equals",
                    "enum": [
                        "equals",
                        "notequals",
                        "in",
                        "notin",
                        "gt",
                        "gte",
                        "lt",
                        "lte",
                        "infield"
                    ],
                    "x-ui-hints": {
                        "gt": "greater than",
                        "gte": "greater than or equals",
                        "lt": "less than",
                        "lte": "less than or equals",
                        "notequals": "not equals",
                        "notin": "not in"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "monitoringMeasurementCriteria": {
            "description": "Measurement window and function to be used for monitoring the metric. nil `measurement` indicates that the policy will act on the instantaneous value of the metric that gets reported every 30s.",
            "type": "object",
            "required": [
                "function"
            ],
            "properties": {
                "function": {
                    "description": "Aggregate function to be applied on the metric values that were monitored over a window/interval.",
                    "type": "string",
                    "default": "none_function",
                    "enum": [
                        "none_function",
                        "min",
                        "max",
                        "mean",
                        "difference"
                    ]
                },
                "window": {
                    "description": "The length of time the metric will be monitored/observed before running the values against thresholds for alert creation/resolution. ui-hint: Allowed values - 5m, 10m, 30m, 1h.",
                    "type": "string"
                }
            }
        },
        "monitoringMetricIdentifier": {
            "description": "MetricIdentifier - uniquely identifies an metric that needs to be monitored as part of the policy.",
            "type": "object",
            "properties": {
                "field-name": {
                    "description": "Field belonging to the kind e.g. ConnectionsPerSecond. This is the attribute that will be monitored and alerts will be created/resolved based on the thresholds.",
                    "type": "string"
                },
                "group": {
                    "description": "Metric group - e.g. ftestats, flowstats, etc.",
                    "type": "string"
                },
                "kind": {
                    "description": "Sub-category within the group e.g. MaxSessionThresholdDrops, FlowMissPackets.",
                    "type": "string"
                }
            }
        },
        "monitoringMirrorCollector": {
            "description": "Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture).",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "export-config": {
                    "description": "When collector type is Venice, collector export information is not required.",
                    "$ref": "#/definitions/monitoringMirrorExportConfig"
                },
                "strip-vlan-hdr": {
                    "description": "remove vlan from mirror packet.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "type": {
                    "description": "Type of Collector.",
                    "type": "string",
                    "default": "erspan_type_3",
                    "enum": [
                        "erspan_type_3",
                        "erspan_type_2",
                        "erspan"
                    ],
                    "x-ui-hints": {
                        "erspan": "ERSPAN - deprecated",
                        "erspan_type_2": "ERSPAN Type 2",
                        "erspan_type_3": "ERSPAN Type 3"
                    }
                }
            }
        },
        "monitoringMirrorExportConfig": {
            "type": "object",
            "required": [
                "destination"
            ],
            "properties": {
                "destination": {
                    "description": "IP address of the collector/entity to which the data is to be exported. Should be a valid IPv4 address.",
                    "type": "string",
                    "example": "10.1.1.1 "
                },
                "gateway": {
                    "description": "IP address of the gateway to reach the collector.",
                    "type": "string"
                },
                "virtual-router": {
                    "description": "Destination VirtualRouter/VRF for mirror session. If not specified, the value is populated as \"default\". For underlay Vrf, the VrfName should be \"underlay-vpc\".",
                    "type": "string"
                }
            }
        },
        "monitoringMirrorSession": {
            "description": "MirrorSession.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringMirrorSessionSpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringMirrorSessionStatus"
                }
            }
        },
        "monitoringMirrorSessionList": {
            "description": "MirrorSessionList is a container object for list of MirrorSession objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of MirrorSession objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringMirrorSession"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringMirrorSessionSpec": {
            "description": "MirrorSessionSpec.",
            "type": "object",
            "required": [
                "packet-filters",
                "span-id"
            ],
            "properties": {
                "collectors": {
                    "description": "Mirrored packet collectors.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringMirrorCollector"
                    }
                },
                "disabled": {
                    "description": "Enable/disable mirroring.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "interfaces": {
                    "description": "If specified, will pick up interface matching the selector.",
                    "$ref": "#/definitions/monitoringInterfaceMirror"
                },
                "match-rules": {
                    "description": "Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringMatchRule"
                    }
                },
                "packet-filters": {
                    "type": "array",
                    "default": "all-packets",
                    "enum": [
                        "all-packets",
                        "all-drops",
                        "network-policy-drop",
                        "firewall-policy-drop"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "x-ui-hints": {
                        "all-drops": "All Drops",
                        "all-packets": "All Packets",
                        "firewall-policy-drop": "Firewall Policy Drops",
                        "network-policy-drop": "Network Policy Drops"
                    }
                },
                "packet-size": {
                    "description": "PacketSize: Max size of a mirrored packet, packet size is not checked by default. Value should be between 64 and 2048.",
                    "type": "integer",
                    "format": "int64",
                    "maximum": 2048,
                    "minimum": 64
                },
                "source": {
                    "description": "MirrorSource  is generic wrapper, Interfaces and workloads should be phased out.",
                    "$ref": "#/definitions/monitoringMirrorSource"
                },
                "span-id": {
                    "description": "Value should be between 1 and 1023.",
                    "type": "integer",
                    "format": "int64",
                    "default": "1",
                    "maximum": 1023,
                    "minimum": 1
                },
                "start-condition": {
                    "description": "StartConditions.",
                    "$ref": "#/definitions/monitoringMirrorStartConditions"
                },
                "workloads": {
                    "description": "If specified, will pick up workloads matching the selector.",
                    "$ref": "#/definitions/monitoringWorkloadMirror"
                }
            }
        },
        "monitoringMirrorSessionStatus": {
            "description": "MirrorSessionStatus.",
            "type": "object",
            "required": [
                "schedule-state"
            ],
            "properties": {
                "propagation-status": {
                    "$ref": "#/definitions/monitoringPropagationStatus"
                },
                "schedule-state": {
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "active",
                        "stopped",
                        "scheduled",
                        "error-no-mirror-session"
                    ],
                    "x-ui-hints": {
                        "active": "Active",
                        "error-no-mirror-session": "Max Mirror Sessions Exceeded",
                        "none": "None",
                        "scheduled": "Scheduled",
                        "stopped": "Stopped"
                    }
                },
                "started-at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "monitoringMirrorSource": {
            "type": "object",
            "required": [
                "target-type",
                "direction"
            ],
            "properties": {
                "direction": {
                    "description": "rx is towards the Source and tx is from Source.",
                    "type": "string",
                    "default": "both",
                    "enum": [
                        "both",
                        "tx",
                        "rx"
                    ],
                    "x-ui-hints": {
                        "both": "Both",
                        "rx": "Rx",
                        "tx": "Tx"
                    }
                },
                "target-selectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/labelsSelector"
                    }
                },
                "target-type": {
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "interface",
                        "workload",
                        "host"
                    ],
                    "x-ui-hints": {
                        "host": "Host",
                        "interface": "Interface",
                        "none": "None",
                        "workload": "Workload"
                    }
                }
            }
        },
        "monitoringMirrorStartConditions": {
            "description": "MirrorStartConditions - Conditions to start mirroring.",
            "type": "object",
            "properties": {
                "schedule-time": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "monitoringPSMExportTarget": {
            "description": "PSMExportTarget represents PSM used as a log export target.",
            "type": "object",
            "properties": {
                "enable": {
                    "description": "Enable is for enabling the log export. Its default value is false.",
                    "type": "boolean",
                    "format": "boolean"
                }
            }
        },
        "monitoringPrivacyConfig": {
            "description": "PrivacyConfig contains the configuration for SNMP Trap encryption.",
            "type": "object",
            "required": [
                "algo"
            ],
            "properties": {
                "algo": {
                    "type": "string",
                    "default": "des56",
                    "enum": [
                        "des56",
                        "aes128"
                    ]
                },
                "password": {
                    "description": "Password contains the privacy password.",
                    "type": "string"
                }
            }
        },
        "monitoringPropagationStatus": {
            "type": "object",
            "properties": {
                "dsc-status": {
                    "description": "list of DSCs status.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringDSCStatus"
                    }
                },
                "generation-id": {
                    "description": "The Generation ID this status is for.",
                    "type": "string"
                },
                "min-version": {
                    "description": "The Version running on the slowest DSC.",
                    "type": "string"
                },
                "pending": {
                    "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                    "type": "integer",
                    "format": "int32"
                },
                "pending-dscs": {
                    "description": "list of DSCs where propagation did not complete.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Textual description of propagation status.",
                    "type": "string"
                },
                "updated": {
                    "description": "The number of Naples that this version has already been pushed to.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "monitoringSNMPExport": {
            "type": "object",
            "properties": {
                "snmp-trap-servers": {
                    "description": "TODO:  format, config SNMP trap destination(s).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringSNMPTrapServer"
                    }
                }
            }
        },
        "monitoringSNMPTrapServer": {
            "description": "SNMPTrapServer contains the configuration for sending SNMP traps to a receiver.",
            "type": "object",
            "required": [
                "version"
            ],
            "properties": {
                "auth-config": {
                    "description": "AuthConfig contains the configuration for authentication, valid only for v3.",
                    "$ref": "#/definitions/monitoringAuthConfig"
                },
                "community-or-user": {
                    "description": "CommunityOrUser contains community string for v2c, user for v3.",
                    "type": "string"
                },
                "host": {
                    "description": "Host where the trap needs to be sent.",
                    "type": "string"
                },
                "port": {
                    "description": "Port on the Host where the trap needs to be sent, default is 162.",
                    "type": "string",
                    "default": "162"
                },
                "privacy-config": {
                    "description": "PrivacyConfig contains the configuration for encryption, valid only for v3.",
                    "$ref": "#/definitions/monitoringPrivacyConfig"
                },
                "version": {
                    "type": "string",
                    "default": "v2c",
                    "enum": [
                        "v2c",
                        "v3"
                    ]
                }
            }
        },
        "monitoringStatsAlertPolicy": {
            "description": "StatsAlertPolicy - tenant scoped.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringStatsAlertPolicySpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringStatsAlertPolicyStatus"
                }
            }
        },
        "monitoringStatsAlertPolicyList": {
            "description": "StatsAlertPolicyList is a container object for list of StatsAlertPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of StatsAlertPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringStatsAlertPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringStatsAlertPolicySpec": {
            "type": "object",
            "properties": {
                "destinations": {
                    "description": "name of the alert destinations to be used to send out notification when an alert gets generated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enable": {
                    "description": "User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.",
                    "type": "boolean",
                    "format": "boolean",
                    "default": "true"
                },
                "instance-selector": {
                    "description": "User can narrow down the scope of the policy by filtering the reporters (PSM/DSC nodes) that this policy should act on by providing list of reporter/instance names or labels. Cluster/Node metrics can only have instance-selector of kind 'Node', other metrics can only have instance-selector of kind 'DistributedServiceCard'.",
                    "$ref": "#/definitions/monitoringInstanceSelector"
                },
                "measurement-criteria": {
                    "description": "Measurement window and function to be applied while monitoring the metric.",
                    "$ref": "#/definitions/monitoringMeasurementCriteria"
                },
                "metric": {
                    "description": "Details about the metric that needs to be monitored.",
                    "$ref": "#/definitions/monitoringMetricIdentifier"
                },
                "thresholds": {
                    "description": "Threshold values with varying severity.",
                    "$ref": "#/definitions/monitoringThresholds"
                }
            }
        },
        "monitoringStatsAlertPolicyStatus": {
            "type": "object",
            "properties": {
                "acknowledged-alerts": {
                    "description": "Acknowledged alerts based on this policy.",
                    "type": "integer",
                    "format": "int32"
                },
                "open-alerts": {
                    "description": "Open alerts based on this policy.",
                    "type": "integer",
                    "format": "int32"
                },
                "total-hits": {
                    "description": "Total hits on this policy.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "monitoringSyslogAuditor": {
            "type": "object",
            "required": [
                "format"
            ],
            "properties": {
                "config": {
                    "description": "once we support other formats, it should be one of the supported configs syslog specific configuration.",
                    "$ref": "#/definitions/monitoringSyslogExportConfig"
                },
                "enabled": {
                    "description": "flag to enable sending audit events to syslog.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "format": {
                    "description": "audit event export format, SYSLOG_BSD default.",
                    "type": "string",
                    "default": "syslog-bsd",
                    "enum": [
                        "syslog-bsd",
                        "syslog-rfc5424"
                    ],
                    "x-ui-hints": {
                        "syslog-bsd": "BSD",
                        "syslog-rfc5424": "RFC5424"
                    }
                },
                "targets": {
                    "description": "export target ip/port/protocol.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringExportConfig"
                    }
                }
            }
        },
        "monitoringSyslogExport": {
            "description": "Syslog export configuration.",
            "type": "object",
            "required": [
                "format"
            ],
            "properties": {
                "config": {
                    "description": "syslog specific configuration; one of the supported configs.",
                    "$ref": "#/definitions/monitoringSyslogExportConfig"
                },
                "format": {
                    "description": "event export format, SYSLOG_BSD default.",
                    "type": "string",
                    "default": "syslog-bsd",
                    "enum": [
                        "syslog-bsd",
                        "syslog-rfc5424"
                    ],
                    "x-ui-hints": {
                        "syslog-bsd": "BSD",
                        "syslog-rfc5424": "RFC5424"
                    }
                },
                "targets": {
                    "description": "export target ip/port/protocol.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringExportConfig"
                    }
                }
            }
        },
        "monitoringSyslogExportConfig": {
            "description": "syslog export configurations.",
            "type": "object",
            "required": [
                "facility-override"
            ],
            "properties": {
                "facility-override": {
                    "description": "override default facility with this in exported logs.",
                    "type": "string",
                    "default": "user",
                    "enum": [
                        "kernel",
                        "user",
                        "mail",
                        "daemon",
                        "auth",
                        "syslog",
                        "lpr",
                        "news",
                        "uucp",
                        "cron",
                        "authpriv",
                        "ftp",
                        "local0",
                        "local1",
                        "local2",
                        "local3",
                        "local4",
                        "local5",
                        "local6",
                        "local7"
                    ],
                    "x-ui-hints": {
                        "auth": "Auth",
                        "authpriv": "Private Auth",
                        "cron": "CRON",
                        "daemon": "Daemon",
                        "ftp": "FTP",
                        "kernel": "Kernel",
                        "local0": "local 0",
                        "local1": "local 1",
                        "local2": "local 2",
                        "local3": "local 3",
                        "local4": "local 4",
                        "local5": "local 5",
                        "local6": "local 6",
                        "local7": "local 7",
                        "lpr": "LPR",
                        "mail": "Mail",
                        "news": "News",
                        "syslog": "Syslog",
                        "user": "User",
                        "uucp": "UUCP"
                    }
                },
                "prefix": {
                    "description": "add prefix in exported logs.",
                    "type": "string"
                }
            }
        },
        "monitoringTechSupportNodeResult": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "end-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "reason": {
                    "type": "string"
                },
                "start-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "type": "string",
                    "default": "scheduled",
                    "enum": [
                        "scheduled",
                        "running",
                        "completed",
                        "failed",
                        "timeout"
                    ]
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "monitoringTechSupportRequest": {
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringTechSupportRequestSpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringTechSupportRequestStatus"
                }
            }
        },
        "monitoringTechSupportRequestList": {
            "description": "TechSupportRequestList is a container object for list of TechSupportRequest objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of TechSupportRequest objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringTechSupportRequest"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringTechSupportRequestSpec": {
            "type": "object",
            "properties": {
                "collection-selector": {
                    "description": "CollectionSelector is a Label selector for modules to collect.",
                    "$ref": "#/definitions/labelsSelector"
                },
                "node-selector": {
                    "description": "NodeSelector is a label selector that selects nodes to collect tech support from.",
                    "$ref": "#/definitions/TechSupportRequestSpecNodeSelectorSpec"
                },
                "skip-cores": {
                    "description": "SkipCores if set to true skips the core files when collecting techsupport.",
                    "type": "boolean",
                    "format": "boolean",
                    "default": "false"
                },
                "verbosity": {
                    "description": "Verbosity defines the verbosity level.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "monitoringTechSupportRequestStatus": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "ctrlr-node-results": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/monitoringTechSupportNodeResult"
                    }
                },
                "dsc-results": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/monitoringTechSupportNodeResult"
                    }
                },
                "instance-id": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "default": "scheduled",
                    "enum": [
                        "scheduled",
                        "running",
                        "completed",
                        "failed",
                        "timeout"
                    ]
                }
            }
        },
        "monitoringThreshold": {
            "description": "Threshold represents the threshold value of a metric against different severities.",
            "type": "object",
            "required": [
                "severity"
            ],
            "properties": {
                "raise-value": {
                    "description": "Raise/Create an alert when the threshold reaches this value.",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity of the alert to be created.",
                    "type": "string",
                    "default": "info",
                    "enum": [
                        "info",
                        "warn",
                        "critical"
                    ]
                }
            }
        },
        "monitoringThresholds": {
            "description": "List of threshold values.",
            "type": "object",
            "required": [
                "operator"
            ],
            "properties": {
                "operator": {
                    "description": "Operator to be applied when comparing metric values against the threshold values.",
                    "type": "string",
                    "default": "less_or_equal_than",
                    "enum": [
                        "less_or_equal_than",
                        "greater_or_equal_than"
                    ]
                },
                "values": {
                    "description": "List of threshold values to be acted against. Key should be one of the alert severity.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringThreshold"
                    }
                }
            }
        },
        "monitoringTimeWindow": {
            "type": "object",
            "properties": {
                "start-time": {
                    "description": "Start/Stop Time - when start time is not specified, it implies start NOW.",
                    "type": "string",
                    "format": "date-time"
                },
                "stop-time": {
                    "description": "Stop time - when not specified, default will be used.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "monitoringTroubleshootingSession": {
            "description": "Troubleshooting session object.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/monitoringTroubleshootingSessionSpec"
                },
                "status": {
                    "$ref": "#/definitions/monitoringTroubleshootingSessionStatus"
                }
            }
        },
        "monitoringTroubleshootingSessionList": {
            "description": "TroubleshootingSessionList is a container object for list of TroubleshootingSession objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of TroubleshootingSession objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringTroubleshootingSession"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "monitoringTroubleshootingSessionSpec": {
            "description": "Troubleshooting Session Spec.",
            "type": "object",
            "properties": {
                "enable-mirroring": {
                    "description": "If packet capture is enabled, a mirror-session will be internally created.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "flow-selector": {
                    "$ref": "#/definitions/monitoringMatchRule"
                },
                "repeat-every": {
                    "type": "string"
                },
                "time-window": {
                    "$ref": "#/definitions/monitoringTimeWindow"
                }
            }
        },
        "monitoringTroubleshootingSessionStatus": {
            "description": "Troubleshooting Session Status.",
            "type": "object",
            "required": [
                "state"
            ],
            "properties": {
                "state": {
                    "type": "string",
                    "default": "running",
                    "enum": [
                        "running",
                        "stopped",
                        "scheduled"
                    ],
                    "x-ui-hints": {
                        "running": "Running",
                        "scheduled": "Scheduled",
                        "stopped": "Stopped"
                    }
                },
                "troubleshooting-results": {
                    "description": "report is generated each time troubleshooting session is activated i.e time-window.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/monitoringTsResult"
                    }
                }
            }
        },
        "monitoringTsResult": {
            "type": "object",
            "properties": {
                "report-url": {
                    "type": "string"
                },
                "time-window": {
                    "description": "time window for which the information was collected.",
                    "$ref": "#/definitions/monitoringTimeWindow"
                }
            }
        },
        "monitoringWorkloadMirror": {
            "type": "object",
            "required": [
                "direction"
            ],
            "properties": {
                "direction": {
                    "description": "rx is towards the workload and tx is from workload.",
                    "type": "string",
                    "default": "both",
                    "enum": [
                        "both",
                        "tx",
                        "rx"
                    ],
                    "x-ui-hints": {
                        "both": "Both",
                        "rx": "Rx",
                        "tx": "Tx"
                    }
                },
                "selectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/labelsSelector"
                    }
                }
            }
        },
        "searchTextRequirement": {
            "description": "TextRequirement is AND of text-strings in the list It is comprised of words or phrases for text search support. If a text-string has space separated multi-word, it will be interpreted as a phrase. In the example below : - \"link down\" will be a phrase query - network, production, staging will be a word query For eg: network                      (match network) link down                    (match \"link down\" phrase) network,production           (match network AND production) network,link down,staging    (match network AND \"link down\" AND staging).",
            "type": "object",
            "properties": {
                "text": {
                    "description": "AND of words or phrases to be matched The max text-string length is 256 bytes. Length of string should be between 0 and 256.",
                    "type": "array",
                    "maxLength": 256,
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}