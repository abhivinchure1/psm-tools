{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Service name\n\n",
        "title": "Auth API reference"
    },
    "paths": {
        "/configs/auth/v1/authn-policy": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get AuthenticationPolicy object",
                "operationId": "GetAuthenticationPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Order in which authenticators are applied. If an authenticator returns success, others are skipped.",
                        "name": "authenticators.authenticator-order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "byte",
                        "description": "Secret used to sign JWT token.",
                        "name": "spec.secret",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "TokenExpiry is time duration after which JWT token expires. Default is 6 days. A duration string is a sequence of decimal number and a unit suffix, such as \"300ms\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". Should be a valid time duration.",
                        "name": "spec.token-expiry",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update AuthenticationPolicy object",
                "operationId": "UpdateAuthenticationPolicy",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create AuthenticationPolicy object",
                "operationId": "AddAuthenticationPolicy",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/authn-policy/LdapBindCheck": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Test LDAP bind operation",
                "operationId": "LdapBindCheck",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/authn-policy/LdapConnectionCheck": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Test LDAP connection",
                "operationId": "LdapConnectionCheck",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/authn-policy/TokenSecretGenerate": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Generate secret for token signing",
                "operationId": "TokenSecretGenerate",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authTokenSecretRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/authn-policy/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label AuthenticationPolicy object",
                "operationId": "LabelAuthenticationPolicy",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authAuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/role-bindings": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "List RoleBinding objects",
                "operationId": "ListRoleBinding_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBindingList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create RoleBinding object",
                "operationId": "AddRoleBinding_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/role-bindings/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get RoleBinding object",
                "operationId": "GetRoleBinding_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "spec.users",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "spec.user-groups",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update RoleBinding object",
                "operationId": "UpdateRoleBinding_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Delete RoleBinding object",
                "operationId": "DeleteRoleBinding_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/role-bindings/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label RoleBinding object",
                "operationId": "LabelRoleBinding_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/roles": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "List Role objects",
                "operationId": "ListRole_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create Role object",
                "operationId": "AddRole_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/roles/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get Role object",
                "operationId": "GetRole_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update Role object",
                "operationId": "UpdateRole_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Delete Role object",
                "operationId": "DeleteRole_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/roles/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label Role object",
                "operationId": "LabelRole_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/role-bindings": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "List RoleBinding objects",
                "operationId": "ListRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBindingList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create RoleBinding object",
                "operationId": "AddRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/role-bindings/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get RoleBinding object",
                "operationId": "GetRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "spec.users",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "name": "spec.user-groups",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update RoleBinding object",
                "operationId": "UpdateRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Delete RoleBinding object",
                "operationId": "DeleteRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/role-bindings/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label RoleBinding object",
                "operationId": "LabelRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleBinding"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/roles": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "List Role objects",
                "operationId": "ListRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRoleList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create Role object",
                "operationId": "AddRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/roles/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get Role object",
                "operationId": "GetRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update Role object",
                "operationId": "UpdateRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Delete Role object",
                "operationId": "DeleteRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/roles/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label Role object",
                "operationId": "LabelRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authRole"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/user-preferences/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get UserPreference object",
                "operationId": "GetUserPreference",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update UserPreference object",
                "operationId": "UpdateUserPreference",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/user-preferences/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label UserPreference object",
                "operationId": "LabelUserPreference",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/users": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "List User objects",
                "operationId": "ListUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create User object",
                "operationId": "AddUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/users/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get User object",
                "operationId": "GetUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.fullname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Must be a valid email.",
                        "name": "spec.email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Password should be atleast 9 characters containing atleast 1 digit, 1 uppercase letter and 1 special character from \"~!@#$%^&*()_+`-={}|[]\\\\:\\\"<>?,./\".",
                        "name": "spec.password",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.type",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Roles assigned to user.",
                        "name": "status.roles",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Groups that external user belongs to.",
                        "name": "status.user-groups",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last login time.",
                        "name": "status.last-login",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Authenticators used for last successful login.",
                        "name": "status.authenticators",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last password change time for local user.",
                        "name": "status.last-password-change",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update User object",
                "operationId": "UpdateUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Delete User object",
                "operationId": "DeleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/users/{O.Name}/IsAuthorized": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Review authorization for user",
                "operationId": "IsAuthorized",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authSubjectAccessReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/users/{O.Name}/PasswordChange": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Change user password",
                "operationId": "PasswordChange",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authPasswordChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/users/{O.Name}/PasswordReset": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Reset user password",
                "operationId": "PasswordReset",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authPasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/tenant/{O.Tenant}/users/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label User object",
                "operationId": "LabelUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/user-preferences/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get UserPreference object",
                "operationId": "GetUserPreference_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.options",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update UserPreference object",
                "operationId": "UpdateUserPreference_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/user-preferences/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label UserPreference object",
                "operationId": "LabelUserPreference_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserPreference"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/users": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "List User objects",
                "operationId": "ListUser_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUserList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Create User object",
                "operationId": "AddUser_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/users/{O.Name}": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Get User object",
                "operationId": "GetUser_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.fullname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Must be a valid email.",
                        "name": "spec.email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Password should be atleast 9 characters containing atleast 1 digit, 1 uppercase letter and 1 special character from \"~!@#$%^&*()_+`-={}|[]\\\\:\\\"<>?,./\".",
                        "name": "spec.password",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "spec.type",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Roles assigned to user.",
                        "name": "status.roles",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Groups that external user belongs to.",
                        "name": "status.user-groups",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last login time.",
                        "name": "status.last-login",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Authenticators used for last successful login.",
                        "name": "status.authenticators",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last password change time for local user.",
                        "name": "status.last-password-change",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Update User object",
                "operationId": "UpdateUser_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Delete User object",
                "operationId": "DeleteUser_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/users/{O.Name}/IsAuthorized": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Review authorization for user",
                "operationId": "IsAuthorized_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authSubjectAccessReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/users/{O.Name}/PasswordChange": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Change user password",
                "operationId": "PasswordChange_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authPasswordChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/users/{O.Name}/PasswordReset": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Reset user password",
                "operationId": "PasswordReset_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authPasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/users/{O.Name}/label": {
            "post": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Label User object",
                "operationId": "LabelUser_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/authUser"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/authn-policy": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch AuthenticationPolicy objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchAuthenticationPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgAuthenticationPolicyWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/role-bindings": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch RoleBinding objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchRoleBinding_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgRoleBindingWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/roles": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch Role objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchRole_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgRoleWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/tenant/{O.Tenant}/role-bindings": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch RoleBinding objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgRoleBindingWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/tenant/{O.Tenant}/roles": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch Role objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchRole",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgRoleWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/tenant/{O.Tenant}/user-preferences": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch UserPreference objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchUserPreference",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgUserPreferenceWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/tenant/{O.Tenant}/users": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch User objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchUser",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgUserWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/user-preferences": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch UserPreference objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchUserPreference_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgUserPreferenceWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/auth/v1/watch/users": {
            "get": {
                "tags": [
                    "auth/v1"
                ],
                "summary": "Watch User objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchUser_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/authAutoMsgUserWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiAggWatchOptions": {
            "type": "object",
            "properties": {
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "watch-options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiKindWatchOptions"
                    }
                }
            }
        },
        "apiKindWatchOptions": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/apiListWatchOptions"
                }
            }
        },
        "apiLabel": {
            "description": "Label is the input for label operations.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "creation-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "generation-id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mod-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "type": "string"
                },
                "self-link": {
                    "type": "string"
                },
                "tenant": {
                    "description": "Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "apiListMeta": {
            "description": "ListMeta contains the metadata for list of objects.",
            "type": "object",
            "properties": {
                "resource-version": {
                    "description": "Resource version of object store at the time of list generation.",
                    "type": "string"
                },
                "total-count": {
                    "description": "TotalCount is the total count of results (non paginated) that the server holds.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "apiListWatchOptions": {
            "type": "object",
            "required": [
                "sort-order"
            ],
            "properties": {
                "creation-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "field-change-selector": {
                    "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field-selector": {
                    "description": "FieldSelector to select on field values in list or watch results.",
                    "type": "string"
                },
                "from": {
                    "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                    "type": "integer",
                    "format": "int32"
                },
                "generation-id": {
                    "type": "string"
                },
                "label-selector": {
                    "description": "LabelSelector to select on labels in list or watch results.",
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "max-results": {
                    "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                    "type": "integer",
                    "format": "int32"
                },
                "meta-only": {
                    "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                    "type": "boolean",
                    "format": "boolean",
                    "default": "false"
                },
                "mod-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "type": "string"
                },
                "self-link": {
                    "type": "string"
                },
                "sort-order": {
                    "description": "order to sort List results in.",
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "by-name",
                        "by-name-reverse",
                        "by-version",
                        "by-version-reverse",
                        "by-creation-time",
                        "by-creation-time-reverse",
                        "by-mod-time",
                        "by-mod-time-reverse"
                    ],
                    "x-ui-hints": {
                        "by-creation-time": "By Creation Time",
                        "by-creation-time-reverse": "By Creation Time Reverse",
                        "by-mod-time": "By Modification Time",
                        "by-mod-time-reverse": "By Modification Time Reverse",
                        "by-name": "By Name",
                        "by-name-reverse": "By Name Reverse",
                        "by-version": "By Version",
                        "by-version-reverse": "By Version Reverse",
                        "none": "None"
                    }
                },
                "tenant": {
                    "description": "Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "apiObjectMeta": {
            "description": "ObjectMeta contains metadata that all objects stored in kvstore must have.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "creation-time": {
                    "description": "System generated and updated, not updatable by user.",
                    "type": "string",
                    "format": "date-time",
                    "title": "CreationTime is the creation time of the object"
                },
                "generation-id": {
                    "description": "This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "GenerationID is the generation Id for the object"
                },
                "labels": {
                    "type": "object",
                    "title": "Labels are arbitrary (key,value) pairs associated with any object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mod-time": {
                    "description": "System generated and updated, not updatable by user.",
                    "type": "string",
                    "format": "date-time",
                    "title": "ModTime is the Last Modification time of the object"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "title": "Name of the object, unique within a Namespace for scoped objects",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "description": "This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "Resource version in the object store"
                },
                "self-link": {
                    "description": "When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "SelfLink is a link for accessing this object"
                },
                "tenant": {
                    "description": "This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "title": "Tenant to which the object belongs to",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "description": "This is generated on creation of the object. System generated, not updatable by user.",
                    "type": "string",
                    "title": "UUID is the unique identifier for the object"
                }
            }
        },
        "apiObjectRef": {
            "description": "ObjectRef contains identifying information about an object.",
            "type": "object",
            "properties": {
                "kind": {
                    "description": "Kind represents the type of the API object.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the object, unique within a Namespace for scoped objects.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the object, for scoped objects.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant of the object.",
                    "type": "string"
                },
                "uri": {
                    "description": "URI is a link to accessing the referenced object.",
                    "type": "string"
                }
            }
        },
        "apiStatus": {
            "description": "Status is returned for calls that dont return objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "code": {
                    "description": "Code is the HTTP status code.",
                    "type": "integer",
                    "format": "int32"
                },
                "kind": {
                    "type": "string"
                },
                "message": {
                    "description": "Message contains human readable form of the error.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "object-ref": {
                    "description": "Reference to the object (optional) for which this status is being sent.",
                    "$ref": "#/definitions/apiObjectRef"
                },
                "result": {
                    "description": "Result contains the status of the operation, success or failure.",
                    "$ref": "#/definitions/apiStatusResult"
                }
            }
        },
        "apiStatusResult": {
            "description": "StatusResult contains possible statuses for a NIC.",
            "type": "object",
            "properties": {
                "Str": {
                    "type": "string"
                }
            }
        },
        "apiTimestamp": {
            "type": "object",
            "properties": {
                "nanos": {
                    "type": "integer",
                    "format": "int32"
                },
                "seconds": {
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "apiTypeMeta": {
            "description": "TypeMeta contains the metadata about kind and version for all API objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind represents the type of the API object.",
                    "type": "string"
                }
            }
        },
        "apiWatchControl": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "apiWatchEvent": {
            "type": "object",
            "properties": {
                "control": {
                    "$ref": "#/definitions/apiWatchControl"
                },
                "object": {
                    "$ref": "#/definitions/googleprotobufAny"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apiWatchEventList": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiWatchEvent"
                    }
                }
            }
        },
        "authAuthenticationPolicy": {
            "description": "AuthenticationPolicy defines various authentication mechanisms available and order in which they are used.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains configuration of authentication mechanisms.",
                    "$ref": "#/definitions/authAuthenticationPolicySpec"
                },
                "status": {
                    "description": "Status contains the current state of the authentication policy.",
                    "$ref": "#/definitions/authAuthenticationPolicyStatus"
                }
            }
        },
        "authAuthenticationPolicyList": {
            "description": "AuthenticationPolicyList is a container object for list of AuthenticationPolicy objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of AuthenticationPolicy objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authAuthenticationPolicy"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "authAuthenticationPolicySpec": {
            "description": "spec part of authentication policy object.",
            "type": "object",
            "required": [
                "token-expiry"
            ],
            "properties": {
                "authenticators": {
                    "$ref": "#/definitions/authAuthenticators"
                },
                "secret": {
                    "description": "Secret used to sign JWT token.",
                    "type": "string",
                    "format": "byte"
                },
                "token-expiry": {
                    "description": "TokenExpiry is time duration after which JWT token expires. Default is 6 days. A duration string is a sequence of decimal number and a unit suffix, such as \"300ms\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". Should be a valid time duration.",
                    "type": "string",
                    "default": "144h",
                    "example": "60s"
                }
            }
        },
        "authAuthenticationPolicyStatus": {
            "description": "status part of authentication policy object.",
            "type": "object",
            "properties": {
                "ldap-servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authLdapServerStatus"
                    }
                },
                "radius-servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authRadiusServerStatus"
                    }
                }
            }
        },
        "authAuthenticators": {
            "type": "object",
            "required": [
                "authenticator-order"
            ],
            "properties": {
                "authenticator-order": {
                    "description": "Order in which authenticators are applied. If an authenticator returns success, others are skipped.",
                    "type": "array",
                    "default": "local",
                    "enum": [
                        "local",
                        "ldap",
                        "radius"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "x-ui-hints": {
                        "local": "Local"
                    }
                },
                "ldap": {
                    "$ref": "#/definitions/authLdap"
                },
                "local": {
                    "$ref": "#/definitions/authLocal"
                },
                "radius": {
                    "$ref": "#/definitions/authRadius"
                }
            }
        },
        "authAutoMsgAuthenticationPolicyWatchHelper": {
            "description": "AutoMsgAuthenticationPolicyWatchHelper is a wrapper object for watch events for AuthenticationPolicy objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authAutoMsgAuthenticationPolicyWatchHelperWatchEvent"
                    }
                }
            }
        },
        "authAutoMsgAuthenticationPolicyWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/authAuthenticationPolicy"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "authAutoMsgRoleBindingWatchHelper": {
            "description": "AutoMsgRoleBindingWatchHelper is a wrapper object for watch events for RoleBinding objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authAutoMsgRoleBindingWatchHelperWatchEvent"
                    }
                }
            }
        },
        "authAutoMsgRoleBindingWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/authRoleBinding"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "authAutoMsgRoleWatchHelper": {
            "description": "AutoMsgRoleWatchHelper is a wrapper object for watch events for Role objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authAutoMsgRoleWatchHelperWatchEvent"
                    }
                }
            }
        },
        "authAutoMsgRoleWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/authRole"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "authAutoMsgUserPreferenceWatchHelper": {
            "description": "AutoMsgUserPreferenceWatchHelper is a wrapper object for watch events for UserPreference objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authAutoMsgUserPreferenceWatchHelperWatchEvent"
                    }
                }
            }
        },
        "authAutoMsgUserPreferenceWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/authUserPreference"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "authAutoMsgUserWatchHelper": {
            "description": "AutoMsgUserWatchHelper is a wrapper object for watch events for User objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authAutoMsgUserWatchHelperWatchEvent"
                    }
                }
            }
        },
        "authAutoMsgUserWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/authUser"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "authLdap": {
            "type": "object",
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authLdapDomain"
                    }
                }
            }
        },
        "authLdapAttributeMapping": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "The name of the attribute for storing the users\u2019 e-mail address. This attribute is primarily used for linked Authentication Server Users. It can also be used to identify users by their e-mail address in certificate authentication.",
                    "type": "string"
                },
                "fullname": {
                    "description": "The name that the server uses for the Name attribute.",
                    "type": "string"
                },
                "group": {
                    "description": "The name that the server uses for the Group Member Attribute. By default, the attribute is set to member for standard schema, and sgMember for updated schema.",
                    "type": "string"
                },
                "group-object-class": {
                    "description": "GroupObjectClass is the STRUCTURAL object class for group entry in LDAP. It is used as a filter for group search.",
                    "type": "string"
                },
                "tenant": {
                    "description": "The tenant the server will use for authentication.",
                    "type": "string"
                },
                "user": {
                    "description": "The name that the server uses for the UserID Attribute.",
                    "type": "string"
                },
                "user-object-class": {
                    "description": "UserObjectClass is the STRUCTURAL object class for user entry in LDAP. It is used as a filter for user search.",
                    "type": "string"
                }
            }
        },
        "authLdapDomain": {
            "type": "object",
            "properties": {
                "attribute-mapping": {
                    "description": "Defines how attributes in the LDAP directory are mapped to user properties.",
                    "$ref": "#/definitions/authLdapAttributeMapping"
                },
                "base-dn": {
                    "description": "The LDAP base DN to be used in a user search.",
                    "type": "string"
                },
                "bind-dn": {
                    "description": "The bind DN is the string that Venice uses to log in to the LDAP server. Venice uses this account to validate the remote user attempting to log in. The base DN is the container name and path in the LDAPserver where Venice searches for the remote user account. This is where the password is validated. This contains the user authorization and assigned RBAC roles for use on Venice. Venice requests the attribute from theLDAP server.",
                    "type": "string"
                },
                "bind-password": {
                    "description": "The password for the LDAP database account specified in the Root DN field.",
                    "type": "string"
                },
                "servers": {
                    "description": "Servers is a list that lets you configure multiple LDAP servers for high availability.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authLdapServer"
                    }
                },
                "tag": {
                    "description": "Tag to group domains for authentication.",
                    "type": "string"
                }
            }
        },
        "authLdapServer": {
            "type": "object",
            "properties": {
                "tls-options": {
                    "$ref": "#/definitions/authTLSOptions"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "authLdapServerStatus": {
            "type": "object",
            "required": [
                "result"
            ],
            "properties": {
                "base-dn": {
                    "description": "The LDAP base DN to be used in a user search.",
                    "type": "string"
                },
                "bind-dn": {
                    "description": "The bind DN is the string that Venice uses to log in to the LDAP server. Venice uses this account to validate the remote user attempting to log in. The base DN is the container name and path in the LDAPserver where Venice searches for the remote user account. This is where the password is validated. This contains the user authorization and assigned RBAC roles for use on Venice. Venice requests the attribute from theLDAP server.",
                    "type": "string"
                },
                "bind-password": {
                    "description": "The password for the LDAP database account specified in the Root DN field.",
                    "type": "string"
                },
                "message": {
                    "description": "Message contains error message in case of failed check or a success message.",
                    "type": "string"
                },
                "result": {
                    "description": "Result indicates if ldap check was successful.",
                    "type": "string",
                    "default": "connect-success",
                    "enum": [
                        "connect-success",
                        "connect-failure",
                        "bind-success",
                        "bind-failure"
                    ]
                },
                "server": {
                    "description": "LdapServer contains the ldap server configuration that was checked.",
                    "$ref": "#/definitions/authLdapServer"
                }
            }
        },
        "authLocal": {
            "type": "object"
        },
        "authOperation": {
            "description": "Operation represents an user action on a resource about which an authorization decision has to be made.",
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "default": "all-actions",
                    "enum": [
                        "all-actions",
                        "create",
                        "read",
                        "update",
                        "delete",
                        "commit",
                        "clear"
                    ],
                    "x-ui-hints": {
                        "all-actions": "All Actions",
                        "clear": "Clear Config",
                        "commit": "Commit Config",
                        "create": "Create",
                        "delete": "Delete",
                        "read": "Read",
                        "update": "Update"
                    }
                },
                "resource": {
                    "$ref": "#/definitions/authResource"
                }
            }
        },
        "authOperationStatus": {
            "description": "OperationStatus contains the result of the authorization check for a requested operation.",
            "type": "object",
            "properties": {
                "allowed": {
                    "description": "Allowed indicates if Operation is authorized.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "message": {
                    "description": "Message reports error validating Operation.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation for which authorization decision is resported.",
                    "$ref": "#/definitions/authOperation"
                }
            }
        },
        "authPasswordChangeRequest": {
            "description": "PasswordChangeRequest is for user to change his password.",
            "type": "object",
            "required": [
                "old-password",
                "new-password"
            ],
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "new-password": {
                    "description": "Length of string should be at least 1.",
                    "type": "string",
                    "minLength": 1
                },
                "old-password": {
                    "description": "Length of string should be at least 1.",
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "authPasswordResetRequest": {
            "description": "PasswordResetRequest is for user to reset password.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                }
            }
        },
        "authPermission": {
            "description": "Permission defines if actions are allowed on resource group, resource type, resource name or arbitrary API endpoints.",
            "type": "object",
            "required": [
                "actions"
            ],
            "properties": {
                "actions": {
                    "description": "Actions are actions on a resource that a permission allows.",
                    "type": "array",
                    "default": "all-actions",
                    "enum": [
                        "all-actions",
                        "create",
                        "read",
                        "update",
                        "delete",
                        "commit",
                        "clear"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "x-ui-hints": {
                        "all-actions": "All Actions",
                        "clear": "Clear Config",
                        "commit": "Commit Config",
                        "create": "Create",
                        "delete": "Delete",
                        "read": "Read",
                        "update": "Update"
                    }
                },
                "resource-group": {
                    "description": "ResourceGroup is grouping of resource types for which a permission is defined. It is empty for Search, Event, MetricsQuery and non-api server endpoint. Specifying \"_All_\" will match all api groups including empty group for non-api server endpoints like those defined in ResrcKind enum.",
                    "type": "string"
                },
                "resource-kind": {
                    "description": "ResourceKind is a resource kind for which permission is defined. It can be an API Server object kind or kinds defined in ResrcKind enum. Specifying \"_All_\" will match all resource kinds.",
                    "type": "string"
                },
                "resource-names": {
                    "description": "ResourceNames identify specific objects on which this permission applies. If resource name is not specified in permission then it implies all resources of the specified kind.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resource-namespace": {
                    "description": "ResourceNamespace is a namespace to which a resource (API Server object) belongs. Default value is \"_All_\" which matches all namespaces.",
                    "type": "string",
                    "default": "_All_"
                },
                "resource-tenant": {
                    "description": "ResourceTenant is the tenant to which resource belongs. It will be automatically set to the tenant to which role object belongs. Exception are roles in \"default\" tenant. Role in \"default\" tenant can include permissions for resources in other tenants. Specifying \"_All_\" will match all tenants.",
                    "type": "string"
                }
            }
        },
        "authRadius": {
            "type": "object",
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authRadiusDomain"
                    }
                }
            }
        },
        "authRadiusDomain": {
            "type": "object",
            "properties": {
                "nas-id": {
                    "description": "NasID is a string identifying the NAS(API Gw) originating the Access-Request.",
                    "type": "string"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authRadiusServer"
                    }
                },
                "tag": {
                    "description": "Tag to group domains for authentication.",
                    "type": "string"
                }
            }
        },
        "authRadiusServer": {
            "type": "object",
            "required": [
                "auth-method"
            ],
            "properties": {
                "auth-method": {
                    "description": "AuthMethod is authentication method to use with the RADIUS server.",
                    "type": "string",
                    "default": "pap",
                    "enum": [
                        "pap",
                        "peap-mschapv2",
                        "eap-ttls-pap"
                    ]
                },
                "secret": {
                    "description": "Secret is the shared secret between API Gw and RADIUS server.",
                    "type": "string"
                },
                "trusted-certs": {
                    "description": "TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates. It is used in PEAP and EAP_TTLS auth methods.",
                    "type": "string"
                },
                "url": {
                    "description": "<IP address>:<Port> of the RADIUS server.",
                    "type": "string"
                }
            }
        },
        "authRadiusServerStatus": {
            "type": "object",
            "required": [
                "result"
            ],
            "properties": {
                "message": {
                    "description": "Message contains error message in case of failed check or a success message.",
                    "type": "string"
                },
                "nas-id": {
                    "description": "NasID is a string identifying the NAS(API Gw) originating the Access-Request.",
                    "type": "string"
                },
                "result": {
                    "description": "Result indicates if radius check was successful.",
                    "type": "string",
                    "default": "connect-success",
                    "enum": [
                        "connect-success",
                        "connect-failure"
                    ]
                },
                "server": {
                    "description": "RadiusServer contains the radius server configuration that was checked.",
                    "$ref": "#/definitions/authRadiusServer"
                }
            }
        },
        "authResource": {
            "description": "Resource represents an object or API endpoint resource on which authorization for an action needs to be checked.",
            "type": "object",
            "properties": {
                "group": {
                    "description": "Group of resource to which access is desired.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind of resource to which access is desired.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of a specific resource to which access is desired.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of resource within which access to a resource is desired.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant to which the resource belongs.",
                    "type": "string"
                }
            }
        },
        "authRole": {
            "description": "Role is a collection of permissions.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of the role.",
                    "$ref": "#/definitions/authRoleSpec"
                },
                "status": {
                    "description": "Status contains the current state of the role.",
                    "$ref": "#/definitions/authRoleStatus"
                }
            }
        },
        "authRoleBinding": {
            "description": "RoleBinding is an assignment of a role to users or groups.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of the role binding.",
                    "$ref": "#/definitions/authRoleBindingSpec"
                },
                "status": {
                    "description": "Status contains the current state of the role binding.",
                    "$ref": "#/definitions/authRoleBindingStatus"
                }
            }
        },
        "authRoleBindingList": {
            "description": "RoleBindingList is a container object for list of RoleBinding objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of RoleBinding objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authRoleBinding"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "authRoleBindingSpec": {
            "description": "spec part of role binding object.",
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                },
                "user-groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authRoleBindingStatus": {
            "description": "status part of role binding object.",
            "type": "object"
        },
        "authRoleList": {
            "description": "RoleList is a container object for list of Role objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of Role objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authRole"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "authRoleSpec": {
            "description": "spec part of role object.",
            "type": "object",
            "properties": {
                "permissions": {
                    "description": "Permissions define actions allowed on resources. A resource can be an API Server object or an arbitrary API endpoint.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authPermission"
                    }
                }
            }
        },
        "authRoleStatus": {
            "description": "status part of role object.",
            "type": "object"
        },
        "authSubjectAccessReviewRequest": {
            "description": "SubjectAccessReviewRequest checks whether user can perform requested operations.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authOperation"
                    }
                }
            }
        },
        "authTLSOptions": {
            "type": "object",
            "properties": {
                "server-name": {
                    "description": "ServerName is used to verify the hostname on the returned certificates unless SkipServerCertVerification is true.",
                    "type": "string"
                },
                "skip-server-cert-verification": {
                    "description": "SkipServerCertVerification controls whether a client verifies the server's certificate chain and host name. If SkipServerCertVerification is true, TLS accepts any certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to man-in-the-middle attacks. This should be used only for testing.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "start-tls": {
                    "description": "StartTLS determines if ldap connection uses TLS.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "trusted-certs": {
                    "description": "TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates.",
                    "type": "string"
                }
            }
        },
        "authTokenSecretRequest": {
            "description": "TokenSecretRequest is to re-generate secret for token signing.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                }
            }
        },
        "authUser": {
            "description": "User could be local or external.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of the user.",
                    "$ref": "#/definitions/authUserSpec"
                },
                "status": {
                    "description": "Status contains the current state of the role binding.",
                    "$ref": "#/definitions/authUserStatus"
                }
            }
        },
        "authUserList": {
            "description": "UserList is a container object for list of User objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of User objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authUser"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "authUserPreference": {
            "description": "UserPreference holds all user customization info.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/authUserPreferenceSpec"
                },
                "status": {
                    "$ref": "#/definitions/authUserPreferenceStatus"
                }
            }
        },
        "authUserPreferenceList": {
            "description": "UserPreferenceList is a container object for list of UserPreference objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of UserPreference objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authUserPreference"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "authUserPreferenceSpec": {
            "description": "Holds a byte stream of the user preference. The typing of the user preference will be in the UI code.",
            "type": "object",
            "properties": {
                "options": {
                    "type": "string"
                }
            }
        },
        "authUserPreferenceStatus": {
            "description": "User Preference Status, currently holds nothing.",
            "type": "object"
        },
        "authUserSpec": {
            "description": "spec part of user object.",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "email": {
                    "description": "Must be a valid email.",
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_\\+\\-\\.]+@([a-zA-Z0-9\\-]+\\.)+[a-zA-Z]{2,4}$"
                },
                "fullname": {
                    "type": "string"
                },
                "password": {
                    "description": "Password should be atleast 9 characters containing atleast 1 digit, 1 uppercase letter and 1 special character from \"~!@#$%^&*()_+`-={}|[]\\\\:\\\"<>?,./\".",
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "default": "local",
                    "enum": [
                        "local",
                        "external"
                    ],
                    "x-ui-hints": {
                        "external": "External",
                        "local": "Local"
                    }
                }
            }
        },
        "authUserStatus": {
            "description": "status part of user object.",
            "type": "object",
            "required": [
                "authenticators"
            ],
            "properties": {
                "access-review": {
                    "description": "Authorization information about requested operations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authOperationStatus"
                    }
                },
                "authenticators": {
                    "description": "Authenticators used for last successful login.",
                    "type": "array",
                    "default": "local",
                    "enum": [
                        "local",
                        "ldap",
                        "radius"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "x-ui-hints": {
                        "local": "Local"
                    }
                },
                "last-login": {
                    "description": "Last login time.",
                    "type": "string",
                    "format": "date-time"
                },
                "last-password-change": {
                    "description": "Last password change time for local user.",
                    "type": "string",
                    "format": "date-time"
                },
                "roles": {
                    "description": "Roles assigned to user.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user-groups": {
                    "description": "Groups that external user belongs to.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "googleprotobufAny": {
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { \"@type\": \"type.googleapis.com/google.profile.Person\", \"firstName\": <string>, \"lastName\": <string> } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]): { \"@type\": \"type.googleapis.com/google.protobuf.Duration\", \"value\": \"1.212s\" }.",
            "type": "object",
            "properties": {
                "type_url": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.",
                    "type": "string"
                },
                "value": {
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "type": "string",
                    "format": "byte"
                }
            }
        }
    }
}