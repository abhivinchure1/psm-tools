{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Service name\n\n",
        "title": "Workload API reference"
    },
    "paths": {
        "/configs/workload/v1/endpoints": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "List Endpoint objects",
                "operationId": "ListEndpoint_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadEndpointList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/endpoints/{O.Name}": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Get Endpoint object",
                "operationId": "GetEndpoint_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The DSC Name or MAC where the endpoint should reside.",
                        "name": "spec.node-uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP of the DSC where this endpoint exists.",
                        "name": "spec.homing-host-addr",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "MicroSegmentVlan to be assigned to the endpoint.",
                        "name": "spec.micro-segment-vlan",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NodeUUIDList has the list of DSCs where a EP is supposed to go to.",
                        "name": "spec.node-uuid-list",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type is the type of Endpoint that is being created - L2 or L3.",
                        "name": "spec.type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VM or container name.",
                        "name": "status.workload-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "network this endpoint belogs to.",
                        "name": "status.network",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "host address of the host where this endpoint exists.",
                        "name": "status.homing-host-addr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "host name of the host where this endpoint exists.",
                        "name": "status.homing-host-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv4 address of the endpoint.",
                        "name": "status.ipv4-address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv4 gateway for the endpoint.",
                        "name": "status.ipv4-gateway",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv6 address for the endpoint.",
                        "name": "status.ipv6-address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv6 gateway.",
                        "name": "status.ipv6-gateway",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Mac address of the endpoint. Should be a valid MAC address.",
                        "name": "status.mac-address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "homing host's UUID.",
                        "name": "status.node-uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "endpoint FSM state.",
                        "name": "status.EndpointState",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "security groups.",
                        "name": "status.SecurityGroups",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "micro-segment VLAN.",
                        "name": "status.micro-segment-vlan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status of migration.",
                        "name": "migration.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 addresses of the endpoint.",
                        "name": "status.ipv4-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 gateways for the endpoint.",
                        "name": "status.ipv4-gateways",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 addresses for the endpoint.",
                        "name": "status.ipv6-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 gateways.",
                        "name": "status.ipv6-gateways",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "MirrorSessions list of mirror sessions enabled on this endpoint.",
                        "name": "status.mirror-sessions",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NodeUUIDList has the list of DSCs where a EP is supposed to go to.",
                        "name": "status.node-uuid-list",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "WorkloadNames associated with endpoint.",
                        "name": "status.workload-names",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadEndpoint"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/endpoints": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "List Endpoint objects",
                "operationId": "ListEndpoint",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadEndpointList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/endpoints/{O.Name}": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Get Endpoint object",
                "operationId": "GetEndpoint",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The DSC Name or MAC where the endpoint should reside.",
                        "name": "spec.node-uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP of the DSC where this endpoint exists.",
                        "name": "spec.homing-host-addr",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "MicroSegmentVlan to be assigned to the endpoint.",
                        "name": "spec.micro-segment-vlan",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NodeUUIDList has the list of DSCs where a EP is supposed to go to.",
                        "name": "spec.node-uuid-list",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type is the type of Endpoint that is being created - L2 or L3.",
                        "name": "spec.type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "VM or container name.",
                        "name": "status.workload-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "network this endpoint belogs to.",
                        "name": "status.network",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "host address of the host where this endpoint exists.",
                        "name": "status.homing-host-addr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "host name of the host where this endpoint exists.",
                        "name": "status.homing-host-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv4 address of the endpoint.",
                        "name": "status.ipv4-address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv4 gateway for the endpoint.",
                        "name": "status.ipv4-gateway",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv6 address for the endpoint.",
                        "name": "status.ipv6-address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IPv6 gateway.",
                        "name": "status.ipv6-gateway",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Mac address of the endpoint. Should be a valid MAC address.",
                        "name": "status.mac-address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "homing host's UUID.",
                        "name": "status.node-uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "endpoint FSM state.",
                        "name": "status.EndpointState",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "security groups.",
                        "name": "status.SecurityGroups",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "micro-segment VLAN.",
                        "name": "status.micro-segment-vlan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status of migration.",
                        "name": "migration.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 addresses of the endpoint.",
                        "name": "status.ipv4-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 gateways for the endpoint.",
                        "name": "status.ipv4-gateways",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 addresses for the endpoint.",
                        "name": "status.ipv6-addresses",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 gateways.",
                        "name": "status.ipv6-gateways",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "MirrorSessions list of mirror sessions enabled on this endpoint.",
                        "name": "status.mirror-sessions",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "NodeUUIDList has the list of DSCs where a EP is supposed to go to.",
                        "name": "status.node-uuid-list",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "WorkloadNames associated with endpoint.",
                        "name": "status.workload-names",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadEndpoint"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "List Workload objects",
                "operationId": "ListWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkloadList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Create Workload object",
                "operationId": "AddWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads/{O.Name}": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Get Workload object",
                "operationId": "GetWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Hostname of the server where the workload should be running.",
                        "name": "spec.host-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Should be a valid time duration.",
                        "name": "spec.migration-timeout",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Generation ID this status is for.",
                        "name": "propagation-status.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of Naples that this version has already been pushed to.",
                        "name": "propagation-status.updated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                        "name": "propagation-status.pending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Version running on the slowest Naples.",
                        "name": "propagation-status.min-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Textual description of propagation status.",
                        "name": "propagation-status.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of DSCs where propagation did not complete.",
                        "name": "propagation-status.pending-dscs",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Hostname of the server where the workload is currently running.",
                        "name": "status.host-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Controller's migration stage.",
                        "name": "migration-status.stage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "migration start time.",
                        "name": "migration-status.started-at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The status from the dataplane performing migration.",
                        "name": "migration-status.status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "migration completion time.",
                        "name": "migration-status.completed-at",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "MirrorSessions list of mirror sessions enabled on this workload.",
                        "name": "status.mirror-sessions",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Update Workload object",
                "operationId": "UpdateWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Delete Workload object",
                "operationId": "DeleteWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads/{O.Name}/AbortMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Abort Workload Migration operation",
                "operationId": "AbortMigration",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads/{O.Name}/FinalSyncMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Initiates the final sync for the Workload Migration operation",
                "operationId": "FinalSyncMigration",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads/{O.Name}/FinishMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Finish Workload Migration operation",
                "operationId": "FinishMigration",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads/{O.Name}/StartMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Start Workload Migration operation",
                "operationId": "StartMigration",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/tenant/{O.Tenant}/workloads/{O.Name}/label": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Label Workload object",
                "operationId": "LabelWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/watch/endpoints": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Watch Endpoint objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchEndpoint_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/workloadAutoMsgEndpointWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/watch/tenant/{O.Tenant}/endpoints": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Watch Endpoint objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchEndpoint",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/workloadAutoMsgEndpointWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/watch/tenant/{O.Tenant}/workloads": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Watch Workload objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchWorkload",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/workloadAutoMsgWorkloadWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/watch/workloads": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Watch Workload objects. Supports WebSockets or HTTP long poll",
                "operationId": "WatchWorkload_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(streaming responses)",
                        "schema": {
                            "$ref": "#/definitions/workloadAutoMsgWorkloadWatchHelper"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "List Workload objects",
                "operationId": "ListWorkload_1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the object, unique within a Namespace for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "O.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "O.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "O.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "O.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "O.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "O.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "O.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "O.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "LabelSelector to select on labels in list or watch results.",
                        "name": "label-selector",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "FieldSelector to select on field values in list or watch results.",
                        "name": "field-selector",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                        "name": "field-change-selector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                        "name": "max-results",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order to sort List results in.",
                        "name": "sort-order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                        "name": "meta-only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkloadList"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Create Workload object",
                "operationId": "AddWorkload_1",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads/{O.Name}": {
            "get": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Get Workload object",
                "operationId": "GetWorkload_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Kind represents the type of the API object.",
                        "name": "T.kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                        "name": "T.api-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tenant to which the object belongs to. This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                        "name": "meta.tenant",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                        "name": "meta.namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GenerationID is the generation Id for the object. This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                        "name": "meta.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Resource version in the object store. This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                        "name": "meta.resource-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID is the unique identifier for the object. This is generated on creation of the object. System generated, not updatable by user.",
                        "name": "meta.uuid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTime is the creation time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.creation-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "ModTime is the Last Modification time of the object. System generated and updated, not updatable by user.",
                        "name": "meta.mod-time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SelfLink is a link for accessing this object. When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                        "name": "meta.self-link",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Hostname of the server where the workload should be running.",
                        "name": "spec.host-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Should be a valid time duration.",
                        "name": "spec.migration-timeout",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Generation ID this status is for.",
                        "name": "propagation-status.generation-id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of Naples that this version has already been pushed to.",
                        "name": "propagation-status.updated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                        "name": "propagation-status.pending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The Version running on the slowest Naples.",
                        "name": "propagation-status.min-version",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Textual description of propagation status.",
                        "name": "propagation-status.status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of DSCs where propagation did not complete.",
                        "name": "propagation-status.pending-dscs",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Hostname of the server where the workload is currently running.",
                        "name": "status.host-name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Controller's migration stage.",
                        "name": "migration-status.stage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "migration start time.",
                        "name": "migration-status.started-at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The status from the dataplane performing migration.",
                        "name": "migration-status.status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "migration completion time.",
                        "name": "migration-status.completed-at",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "MirrorSessions list of mirror sessions enabled on this workload.",
                        "name": "status.mirror-sessions",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Update Workload object",
                "operationId": "UpdateWorkload_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Delete Workload object",
                "operationId": "DeleteWorkload_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads/{O.Name}/AbortMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Abort Workload Migration operation",
                "operationId": "AbortMigration_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads/{O.Name}/FinalSyncMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Initiates the final sync for the Workload Migration operation",
                "operationId": "FinalSyncMigration_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads/{O.Name}/FinishMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Finish Workload Migration operation",
                "operationId": "FinishMigration_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads/{O.Name}/StartMigration": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Start Workload Migration operation",
                "operationId": "StartMigration_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        },
        "/configs/workload/v1/workloads/{O.Name}/label": {
            "post": {
                "tags": [
                    "workload/v1"
                ],
                "summary": "Label Workload object",
                "operationId": "LabelWorkload_1",
                "parameters": [
                    {
                        "type": "string",
                        "name": "O.Name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apiLabel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(empty)",
                        "schema": {
                            "$ref": "#/definitions/workloadWorkload"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "409": {
                        "description": "Conflict while processing request",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "412": {
                        "description": "Pre-condition failed",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    },
                    "501": {
                        "description": "Request not implemented",
                        "schema": {
                            "$ref": "#/definitions/apiStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiAggWatchOptions": {
            "type": "object",
            "properties": {
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "watch-options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiKindWatchOptions"
                    }
                }
            }
        },
        "apiKindWatchOptions": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/apiListWatchOptions"
                }
            }
        },
        "apiLabel": {
            "description": "Label is the input for label operations.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "creation-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "generation-id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mod-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "type": "string"
                },
                "self-link": {
                    "type": "string"
                },
                "tenant": {
                    "description": "Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "apiListMeta": {
            "description": "ListMeta contains the metadata for list of objects.",
            "type": "object",
            "properties": {
                "resource-version": {
                    "description": "Resource version of object store at the time of list generation.",
                    "type": "string"
                },
                "total-count": {
                    "description": "TotalCount is the total count of results (non paginated) that the server holds.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "apiListWatchOptions": {
            "type": "object",
            "required": [
                "sort-order"
            ],
            "properties": {
                "creation-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "field-change-selector": {
                    "description": "FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field-selector": {
                    "description": "FieldSelector to select on field values in list or watch results.",
                    "type": "string"
                },
                "from": {
                    "description": "From represents the start index number (1 based - first object starts from index 1), of the results list. The results returned would be in the range [from ... (from + (max-results - 1))]. If From = 0, the server will attempt to return all the results in the list without pagination.",
                    "type": "integer",
                    "format": "int32"
                },
                "generation-id": {
                    "type": "string"
                },
                "label-selector": {
                    "description": "LabelSelector to select on labels in list or watch results.",
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "max-results": {
                    "description": "MaxResults is the maximum number of results to be returned as part of the response, per page If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err If MaxResults is 0, the server will return all the results without pagination.",
                    "type": "integer",
                    "format": "int32"
                },
                "meta-only": {
                    "description": "If MetaOnly is set to true, the watch event notification that matches the watch criteria will not contain the full object. It will only contain the information about the object that changed, i.e. which object and what changed. MetaOnly is not set by default.",
                    "type": "boolean",
                    "format": "boolean",
                    "default": "false"
                },
                "mod-time": {
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "type": "string"
                },
                "self-link": {
                    "type": "string"
                },
                "sort-order": {
                    "description": "order to sort List results in.",
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "by-name",
                        "by-name-reverse",
                        "by-version",
                        "by-version-reverse",
                        "by-creation-time",
                        "by-creation-time-reverse",
                        "by-mod-time",
                        "by-mod-time-reverse"
                    ],
                    "x-ui-hints": {
                        "by-creation-time": "By Creation Time",
                        "by-creation-time-reverse": "By Creation Time Reverse",
                        "by-mod-time": "By Modification Time",
                        "by-mod-time-reverse": "By Modification Time Reverse",
                        "by-name": "By Name",
                        "by-name-reverse": "By Name Reverse",
                        "by-version": "By Version",
                        "by-version-reverse": "By Version Reverse",
                        "none": "None"
                    }
                },
                "tenant": {
                    "description": "Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "apiObjectMeta": {
            "description": "ObjectMeta contains metadata that all objects stored in kvstore must have.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "creation-time": {
                    "description": "System generated and updated, not updatable by user.",
                    "type": "string",
                    "format": "date-time",
                    "title": "CreationTime is the creation time of the object"
                },
                "generation-id": {
                    "description": "This is incremented anytime there is an update to the user intent, including Spec update and any update to ObjectMeta. System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "GenerationID is the generation Id for the object"
                },
                "labels": {
                    "type": "object",
                    "title": "Labels are arbitrary (key,value) pairs associated with any object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mod-time": {
                    "description": "System generated and updated, not updatable by user.",
                    "type": "string",
                    "format": "date-time",
                    "title": "ModTime is the Last Modification time of the object"
                },
                "name": {
                    "description": "Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "title": "Name of the object, unique within a Namespace for scoped objects",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "namespace": {
                    "description": "Namespace of the object, for scoped objects. Must start and end with alpha numeric and can have alphanumeric, -, _, . Length of string should be between 2 and 64.",
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "pattern": "^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$"
                },
                "resource-version": {
                    "description": "This is updated anytime there is any change to the object. System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "Resource version in the object store"
                },
                "self-link": {
                    "description": "When the object is served from the API-GW it is the URI path. Example: - \"/v1/tenants/tenants/tenant2\" System generated and updated, not updatable by user.",
                    "type": "string",
                    "title": "SelfLink is a link for accessing this object"
                },
                "tenant": {
                    "description": "This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to. Must be alpha-numerics. Length of string should be between 1 and 48.",
                    "type": "string",
                    "title": "Tenant to which the object belongs to",
                    "maxLength": 48,
                    "minLength": 1,
                    "pattern": "^[a-zA-Z0-9]+$"
                },
                "uuid": {
                    "description": "This is generated on creation of the object. System generated, not updatable by user.",
                    "type": "string",
                    "title": "UUID is the unique identifier for the object"
                }
            }
        },
        "apiObjectRef": {
            "description": "ObjectRef contains identifying information about an object.",
            "type": "object",
            "properties": {
                "kind": {
                    "description": "Kind represents the type of the API object.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the object, unique within a Namespace for scoped objects.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace of the object, for scoped objects.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant of the object.",
                    "type": "string"
                },
                "uri": {
                    "description": "URI is a link to accessing the referenced object.",
                    "type": "string"
                }
            }
        },
        "apiStatus": {
            "description": "Status is returned for calls that dont return objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "code": {
                    "description": "Code is the HTTP status code.",
                    "type": "integer",
                    "format": "int32"
                },
                "kind": {
                    "type": "string"
                },
                "message": {
                    "description": "Message contains human readable form of the error.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "object-ref": {
                    "description": "Reference to the object (optional) for which this status is being sent.",
                    "$ref": "#/definitions/apiObjectRef"
                },
                "result": {
                    "description": "Result contains the status of the operation, success or failure.",
                    "$ref": "#/definitions/apiStatusResult"
                }
            }
        },
        "apiStatusResult": {
            "description": "StatusResult contains possible statuses for a NIC.",
            "type": "object",
            "properties": {
                "Str": {
                    "type": "string"
                }
            }
        },
        "apiTimestamp": {
            "type": "object",
            "properties": {
                "nanos": {
                    "type": "integer",
                    "format": "int32"
                },
                "seconds": {
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "apiTypeMeta": {
            "description": "TypeMeta contains the metadata about kind and version for all API objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "description": "APIVersion defines the version of the API object. This can only be set by the server.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind represents the type of the API object.",
                    "type": "string"
                }
            }
        },
        "apiWatchControl": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "apiWatchEvent": {
            "type": "object",
            "properties": {
                "control": {
                    "$ref": "#/definitions/apiWatchControl"
                },
                "object": {
                    "$ref": "#/definitions/googleprotobufAny"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apiWatchEventList": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apiWatchEvent"
                    }
                }
            }
        },
        "googleprotobufAny": {
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { \"@type\": \"type.googleapis.com/google.profile.Person\", \"firstName\": <string>, \"lastName\": <string> } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]): { \"@type\": \"type.googleapis.com/google.protobuf.Duration\", \"value\": \"1.212s\" }.",
            "type": "object",
            "properties": {
                "type_url": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.",
                    "type": "string"
                },
                "value": {
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "securityDSCStatus": {
            "type": "object",
            "properties": {
                "dsc-id": {
                    "description": "DSC ID for which the agent error or warning is issued.",
                    "type": "string"
                },
                "dsc-info-status": {
                    "description": "InfoStatus contains agent message the operation is failed or warning is issued.",
                    "type": "string"
                }
            }
        },
        "securityPropagationStatus": {
            "type": "object",
            "properties": {
                "dsc-status": {
                    "description": "list of DSCs status.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/securityDSCStatus"
                    }
                },
                "generation-id": {
                    "description": "The Generation ID this status is for.",
                    "type": "string"
                },
                "min-version": {
                    "description": "The Version running on the slowest Naples.",
                    "type": "string"
                },
                "pending": {
                    "description": "Number of Naples pending. If this is 0 it can be assumed that everything is up to date.",
                    "type": "integer",
                    "format": "int32"
                },
                "pending-dscs": {
                    "description": "list of DSCs where propagation did not complete.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "Textual description of propagation status.",
                    "type": "string"
                },
                "updated": {
                    "description": "The number of Naples that this version has already been pushed to.",
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "workloadAutoMsgEndpointWatchHelper": {
            "description": "AutoMsgEndpointWatchHelper is a wrapper object for watch events for Endpoint objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workloadAutoMsgEndpointWatchHelperWatchEvent"
                    }
                }
            }
        },
        "workloadAutoMsgEndpointWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/workloadEndpoint"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "workloadAutoMsgWorkloadWatchHelper": {
            "description": "AutoMsgWorkloadWatchHelper is a wrapper object for watch events for Workload objects.",
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workloadAutoMsgWorkloadWatchHelperWatchEvent"
                    }
                }
            }
        },
        "workloadAutoMsgWorkloadWatchHelperWatchEvent": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/workloadWorkload"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "workloadEndpoint": {
            "description": "Endpoint represents a network endpoint.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of the Endpoint.",
                    "$ref": "#/definitions/workloadEndpointSpec"
                },
                "status": {
                    "description": "Status contains the current state of the Endpoint.",
                    "$ref": "#/definitions/workloadEndpointStatus"
                }
            }
        },
        "workloadEndpointList": {
            "description": "EndpointList is a container object for list of Endpoint objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of Endpoint objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workloadEndpoint"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "workloadEndpointMigrationStatus": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "Status of migration.",
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "start",
                        "final_sync",
                        "done",
                        "failed",
                        "aborted",
                        "from_non_pen_host"
                    ],
                    "x-ui-hints": {
                        "done": "Done",
                        "failed": "Failed",
                        "final_sync": "FinalSync",
                        "none": "None",
                        "start": "Start"
                    }
                }
            }
        },
        "workloadEndpointSpec": {
            "description": "spec part of Endpoint object.",
            "type": "object",
            "properties": {
                "homing-host-addr": {
                    "description": "IP of the DSC where this endpoint exists.",
                    "type": "string"
                },
                "micro-segment-vlan": {
                    "description": "MicroSegmentVlan to be assigned to the endpoint.",
                    "type": "integer",
                    "format": "int64"
                },
                "node-uuid": {
                    "description": "The DSC Name or MAC where the endpoint should reside.",
                    "type": "string"
                },
                "node-uuid-list": {
                    "description": "NodeUUIDList has the list of DSCs where a EP is supposed to go to.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type is the type of Endpoint that is being created - L2 or L3.",
                    "type": "string",
                    "default": "l2"
                }
            }
        },
        "workloadEndpointStatus": {
            "description": "status part of Endpoint object.",
            "type": "object",
            "properties": {
                "EndpointState": {
                    "description": "endpoint FSM state.",
                    "type": "string"
                },
                "SecurityGroups": {
                    "description": "security groups.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "homing-host-addr": {
                    "description": "host address of the host where this endpoint exists.",
                    "type": "string"
                },
                "homing-host-name": {
                    "description": "host name of the host where this endpoint exists.",
                    "type": "string"
                },
                "ipv4-address": {
                    "description": "IPv4 address of the endpoint.",
                    "type": "string"
                },
                "ipv4-addresses": {
                    "description": "IPv4 addresses of the endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipv4-gateway": {
                    "description": "IPv4 gateway for the endpoint.",
                    "type": "string"
                },
                "ipv4-gateways": {
                    "description": "IPv4 gateways for the endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipv6-address": {
                    "description": "IPv6 address for the endpoint.",
                    "type": "string"
                },
                "ipv6-addresses": {
                    "description": "IPv6 addresses for the endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipv6-gateway": {
                    "description": "IPv6 gateway.",
                    "type": "string"
                },
                "ipv6-gateways": {
                    "description": "IPv6 gateways.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mac-address": {
                    "description": "Mac address of the endpoint. Should be a valid MAC address.",
                    "type": "string",
                    "example": "aabb.ccdd.0000, aabb.ccdd.0000, aabb.ccdd.0000"
                },
                "micro-segment-vlan": {
                    "description": "micro-segment VLAN.",
                    "type": "integer",
                    "format": "int64"
                },
                "migration": {
                    "description": "Used to store state if the endpoint is migrating.",
                    "$ref": "#/definitions/workloadEndpointMigrationStatus"
                },
                "mirror-sessions": {
                    "description": "MirrorSessions list of mirror sessions enabled on this endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "network": {
                    "description": "network this endpoint belogs to.",
                    "type": "string"
                },
                "node-uuid": {
                    "description": "homing host's UUID.",
                    "type": "string"
                },
                "node-uuid-list": {
                    "description": "NodeUUIDList has the list of DSCs where a EP is supposed to go to.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workload-attributes": {
                    "description": "VM or container attribute/labels.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "workload-name": {
                    "description": "VM or container name.",
                    "type": "string"
                },
                "workload-names": {
                    "description": "WorkloadNames associated with endpoint.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "workloadWorkload": {
            "description": "Workload represents a VM, container/pod or Baremetal.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/apiObjectMeta"
                },
                "spec": {
                    "description": "Spec contains the configuration of the Workload.",
                    "$ref": "#/definitions/workloadWorkloadSpec"
                },
                "status": {
                    "description": "Status contains the current state of the Workload.",
                    "$ref": "#/definitions/workloadWorkloadStatus"
                }
            }
        },
        "workloadWorkloadIntfSpec": {
            "description": "Spec of a Workload interface.",
            "type": "object",
            "required": [
                "micro-seg-vlan",
                "external-vlan"
            ],
            "properties": {
                "dsc-interfaces": {
                    "description": "List of all DSC interfaces that can be used. The DSC interface is identified using the MAC address assigned to the DSC port. If not specified, DSCs from workload's host object are used.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "external-vlan": {
                    "description": "External vlan assigned for this interface. Value should be between 0 and 4095.",
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4095,
                    "minimum": 0
                },
                "ip-addresses": {
                    "description": "List of all IP addresses configured on a Workload Interface.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mac-address": {
                    "description": "MACAddress contains the MAC address of the interface as seen by the workload. Should be a valid MAC address.",
                    "type": "string",
                    "example": "aabb.ccdd.0000, aabb.ccdd.0000, aabb.ccdd.0000"
                },
                "micro-seg-vlan": {
                    "description": "Micro-segmentation vlan assigned for this interface. Value should be between 0 and 4095.",
                    "type": "integer",
                    "format": "int64",
                    "maximum": 4095,
                    "minimum": 0
                },
                "network": {
                    "description": "Network this interface will belong to.",
                    "type": "string"
                },
                "vni": {
                    "description": "vni is network identifier when the interface uses tunneling protocols, 0 = not used.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "workloadWorkloadIntfStatus": {
            "description": "Status of a Workload interface.",
            "type": "object",
            "properties": {
                "dsc-interfaces": {
                    "description": "List of all DSC interfaces that can be used. The DSC interface is identified using the MAC address assigned to the DSC port.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "description": "Endpoint associated with this Workload interface.",
                    "type": "string"
                },
                "external-vlan": {
                    "description": "External vlan assigned for this interface.",
                    "type": "integer",
                    "format": "int64"
                },
                "ip-addresses": {
                    "description": "List of all IP addresses configured and discovered on a Workload Interface.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mac-address": {
                    "description": "MACAddress contains the MAC address of the interface as seen by the workload.",
                    "type": "string"
                },
                "micro-seg-vlan": {
                    "description": "Micro-segmentation vlan used by this interface.",
                    "type": "integer",
                    "format": "int64"
                },
                "network": {
                    "description": "Network this interface belongs to.",
                    "type": "string"
                },
                "vni": {
                    "description": "vni is network identifier when the interface uses tunneling protocols, 0 = not used.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "workloadWorkloadList": {
            "description": "WorkloadList is a container object for list of Workload objects.",
            "type": "object",
            "properties": {
                "api-version": {
                    "type": "string"
                },
                "items": {
                    "description": "List of Workload objects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workloadWorkload"
                    }
                },
                "kind": {
                    "type": "string"
                },
                "list-meta": {
                    "$ref": "#/definitions/apiListMeta"
                }
            }
        },
        "workloadWorkloadMigrationStatus": {
            "type": "object",
            "required": [
                "stage",
                "status"
            ],
            "properties": {
                "completed-at": {
                    "description": "migration completion time.",
                    "type": "string",
                    "format": "date-time"
                },
                "stage": {
                    "description": "Controller's migration stage.",
                    "type": "string",
                    "default": "migration-none",
                    "enum": [
                        "migration-none",
                        "migration-start",
                        "migration-final-sync",
                        "migration-done",
                        "migration-abort",
                        "migration-from-non-pen-host"
                    ]
                },
                "started-at": {
                    "description": "migration start time.",
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "description": "The status from the dataplane performing migration.",
                    "type": "string",
                    "default": "none",
                    "enum": [
                        "none",
                        "started",
                        "done",
                        "failed",
                        "timed-out"
                    ]
                }
            }
        },
        "workloadWorkloadSpec": {
            "description": "Spec part of Workload object.",
            "type": "object",
            "properties": {
                "host-name": {
                    "description": "Hostname of the server where the workload should be running.",
                    "type": "string"
                },
                "interfaces": {
                    "description": "Spec of all interfaces in the Workload identified by Primary MAC.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workloadWorkloadIntfSpec"
                    }
                },
                "migration-timeout": {
                    "description": "Should be a valid time duration.",
                    "type": "string",
                    "default": "3m",
                    "example": "60s"
                }
            }
        },
        "workloadWorkloadStatus": {
            "description": "Status part of Workload object.",
            "type": "object",
            "properties": {
                "host-name": {
                    "description": "Hostname of the server where the workload is currently running.",
                    "type": "string"
                },
                "interfaces": {
                    "description": "Status of all interfaces in the Workload identified by Primary MAC.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workloadWorkloadIntfStatus"
                    }
                },
                "migration-status": {
                    "description": "Status of workload migration when migration is in process.",
                    "$ref": "#/definitions/workloadWorkloadMigrationStatus"
                },
                "mirror-sessions": {
                    "description": "MirrorSessions list of mirror sessions enabled on this workload.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "propagation-status": {
                    "description": "The status of the configuration propagation to the Naples.",
                    "$ref": "#/definitions/securityPropagationStatus"
                }
            }
        }
    }
}